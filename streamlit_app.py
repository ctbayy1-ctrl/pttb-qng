import streamlit as st
import pandas as pd
from datetime import datetime
import time
import os
import io
import xml.etree.ElementTree as ET
from docx import Document
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.edge.service import Service as EdgeService
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import WebDriverException, TimeoutException, NoSuchElementException
import json
import httpx
import asyncio

# --- C·∫§U H√åNH C√ÅC CH·ªà TI√äU XML ---
XML_TAG_MAP = {
    '01/GTGT': {
        'doanh_thu_kct': 'ct26', 'doanh_thu_0': 'ct29', 'doanh_thu_5': 'ct30',
        'doanh_thu_10': 'ct32', 'thue_gtgt_duoc_khau_tru': 'ct25', 'thue_gtgt_phai_nop': 'ct40',
        'tong_doanh_thu_thue': 'ct34'
    },
    '03/TNDN': {
        'tong_doanh_thu_pl': 'ct04',
        'thu_nhap_khac': 'ct19',
        'loi_nhuan_truoc_thue': 'ctA1',
        'chi_phi': 'ct12',
        'thue_tndn_phai_nop': 'ctC9'
    },
    'BCTC_CDKT': {
        'tien': 'ct110', 'hang_ton_kho': 'ct140',
    },
    'BCTC_KQKD': {
        'doanh_thu_bh': 'ct01', 'gia_von': 'ct11', 'chi_phi_lai_vay': 'ct23',
        'loi_nhuan_truoc_thue': 'ct50',
    },
    '05/KK-TNCN': {
        'tong_so_ld': 'ct16',
        'tong_tnct': 'ct21',
        'tong_thue_da_khau_tru': 'ct29'
    },
    '05/QTT-TNCN': {
        'tong_so_ld': 'ct16',
        'tong_tnct': 'ct23',
        'tong_thue_da_khau_tru': 'ct31',
        'pl_ho_ten': 'ct07',
        'pl_mst': 'ct08',
        'pl_tnct': 'ct12',
        'pl_thue_da_khau_tru': 'ct22'
    }
}
# √Ånh x·∫° m√£ t·ªù khai sang lo·∫°i ƒë·ªÉ x·ª≠ l√Ω
MA_TK_MAP = {
    '842': '01/GTGT', '844': '02/GTGT', '950': '03/TNDN', '892': '03/TNDN',
    '402': 'BCTC', '699': 'BCTC',
    '683': 'BCTC',
    '953': '05/QTT-TNCN',
    '864': '05/KK-TNCN',
}


# --- MODULE 4: GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG (USER INTERFACE) ---
def setup_ui():
    st.set_page_config(page_title="·ª®ng d·ª•ng H·ªó tr·ª£ R√† so√°t HSKT", layout="wide")
    st.title("ü§ñ ·ª®ng d·ª•ng H·ªó tr·ª£ R√† so√°t H·ªì s∆° Khai thu·∫ø")

    loai_to_khai_list = [
        "01/GTGT - T·ªú KHAI THU·∫æ GI√Å TR·ªä GIA TƒÇNG (TT80/2021)",
        "03/TNDN - T·ªù khai quy·∫øt to√°n thu·∫ø TNDN (TT80/2021)",
        "TT200 - B·ªô b√°o c√°o t√†i ch√≠nh",
        "05/QTT-TNCN - T·ªú KHAI QUY·∫æT TO√ÅN THU·∫æ THU NH·∫¨P C√Å NH√ÇN (TT80/2021)",
        "05/KK-TNCN - T·ªù khai kh·∫•u tr·ª´ thu·∫ø TNCN (TT80/2021)",
    ]

    st.sidebar.header("Th√¥ng tin R√† so√°t")
    mode = st.sidebar.radio("Ch·ªçn ch·∫ø ƒë·ªô l√†m vi·ªác:", ("T·∫£i l√™n Th·ªß c√¥ng", "T·ª± ƒë·ªông h√≥a"))

    params = {"mode": mode}

    if mode == "T·ª± ƒë·ªông h√≥a":
        st.sidebar.subheader("Th√¥ng tin ƒêƒÉng nh·∫≠p")
        params["username"] = st.sidebar.text_input("T√†i kho·∫£n", "")
        params["password"] = st.sidebar.text_input("M·∫≠t kh·∫©u", type="password")
        st.sidebar.markdown("---")
        params["mst"] = st.sidebar.text_input("M√£ s·ªë thu·∫ø c·∫ßn r√† so√°t", "", max_chars=14)
        params["nam_tinh_thue"] = st.sidebar.number_input("NƒÉm t√≠nh thu·∫ø", min_value=2010,
                                                          max_value=datetime.now().year, value=datetime.now().year)
        params["loai_tks"] = st.sidebar.multiselect("Ch·ªçn (c√°c) lo·∫°i t·ªù khai", loai_to_khai_list)
    else:
        st.sidebar.subheader("T·∫£i l√™n H·ªì s∆° (.xml)")
        params["uploaded_files"] = st.sidebar.file_uploader(
            "Ch·ªçn c√°c t·ªáp h·ªì s∆° (.xml)",
            accept_multiple_files=True, type=['xml']
        )

    st.sidebar.markdown("---")
    st.sidebar.subheader("C·∫•u h√¨nh Ph√¢n t√≠ch")
    params["accounting_standard"] = st.sidebar.selectbox(
        "Ch·∫ø ƒë·ªô k·∫ø to√°n (BCTC):",
        ["Ch∆∞a ch·ªçn", "Th√¥ng t∆∞ 133", "Th√¥ng t∆∞ 200"],
        help="Ch·ªçn ch·∫ø ƒë·ªô k·∫ø to√°n √°p d·ª•ng cho B√°o c√°o t√†i ch√≠nh ƒë·ªÉ b·∫≠t c√°c quy t·∫Øc ƒë·ªëi chi·∫øu ph√π h·ª£p."
    )

    st.sidebar.subheader("H√≥a ƒë∆°n ƒê·∫ßu ra")
    params["output_invoice_type"] = st.sidebar.selectbox(
        "Lo·∫°i B·∫£ng k√™ B√°n ra:",
        ["T·ªïng h·ª£p", "Chi ti·∫øt"]
    )
    params["output_invoice_file"] = st.sidebar.file_uploader(
        "T·∫£i l√™n B·∫£ng k√™ H√≥a ƒë∆°n B√°n ra (.xlsx, .csv)",
        type=['xlsx', 'csv'],
        key="output_uploader"
    )

    st.sidebar.subheader("H√≥a ƒë∆°n ƒê·∫ßu v√†o")
    params["input_invoice_files"] = st.sidebar.file_uploader(
        "T·∫£i l√™n B·∫£ng k√™ H√≥a ƒë∆°n Mua v√†o (.xlsx, .csv)",
        type=['xlsx', 'csv'],
        key="input_uploader",
        accept_multiple_files=True
    )

    st.sidebar.subheader("T√†i li·ªáu kh√°c")
    params["financial_notes_file"] = st.sidebar.file_uploader(
        "T·∫£i l√™n Thuy·∫øt minh BCTC (.docx, .pdf, .xlsx)",
        type=['docx', 'pdf', 'xlsx', 'xls', 'doc']
    )

    st.sidebar.markdown("---")
    st.sidebar.subheader("C·∫•u h√¨nh AI")
    params["gemini_api_key"] = st.sidebar.text_input("Gemini API Key", type="password",
                                                     help="Nh·∫≠p API Key c·ªßa b·∫°n ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng ph√¢n t√≠ch c·ªßa Gemini.")

    params["start_button"] = st.sidebar.button("üöÄ B·∫Øt ƒë·∫ßu Ph√¢n t√≠ch")
    return params


# --- MODULE 1: THU TH·∫¨P D·ªÆ LI·ªÜU (DATA ACQUISITION) ---
class WebScraper:
    def __init__(self, params):
        self.params = params
        self.download_dir = os.path.join(os.getcwd(), "hoso_thue_auto")
        if not os.path.exists(self.download_dir): os.makedirs(self.download_dir)
        self.driver = self._initialize_driver()

    def _initialize_driver(self):
        try:
            edge_options = webdriver.EdgeOptions()
            edge_options.add_argument("--headless")
            edge_options.add_argument("--window-size=1920,1080")
            prefs = {"download.default_directory": self.download_dir}
            edge_options.add_experimental_option("prefs", prefs)
            service = EdgeService(executable_path='./msedgedriver.exe')
            driver = webdriver.Edge(service=service, options=edge_options)
            st.info("ƒêang s·ª≠ d·ª•ng tr√¨nh duy·ªát Microsoft Edge (ch·∫ø ƒë·ªô ch·∫°y ·∫©n).")
            return driver
        except WebDriverException:
            st.warning("Kh√¥ng t√¨m th·∫•y Edge/msedgedriver.exe. ƒêang th·ª≠ v·ªõi Chrome...")
            try:
                chrome_options = webdriver.ChromeOptions()
                chrome_options.add_argument("--headless")
                chrome_options.add_argument("--window-size=1920,1080")
                prefs = {"download.default_directory": self.download_dir}
                chrome_options.add_experimental_option("prefs", prefs)
                service = ChromeService(executable_path='./chromedriver.exe')
                driver = webdriver.Chrome(service=service, options=chrome_options)
                st.info("ƒêang s·ª≠ d·ª•ng tr√¨nh duy·ªát Google Chrome (ch·∫ø ƒë·ªô ch·∫°y ·∫©n).")
                return driver
            except WebDriverException as e:
                st.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o tr√¨nh duy·ªát. Vui l√≤ng ki·ªÉm tra file driver.")
                raise e

    def login(self):
        st.write(f"1. ƒêang ƒëƒÉng nh·∫≠p v√†o http://thuedientu.tct.vn/...")
        try:
            self.driver.get("http://thuedientu.tct.vn/")
            wait = WebDriverWait(self.driver, 10)
            wait.until(EC.presence_of_element_located((By.ID, "_userName"))).send_keys(self.params['username'])
            self.driver.find_element(By.ID, "password").send_keys(self.params['password'])
            self.driver.find_element(By.ID, "dangnhap").click()
            wait.until(EC.presence_of_element_located((By.XPATH, "//div[contains(text(), 'Tra c·ª©u')]")))
            st.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
            return True
        except (TimeoutException, NoSuchElementException) as e:
            st.error(f"L·ªói ƒëƒÉng nh·∫≠p: {e}")
            return False

    def search_declarations(self, loai_tk):
        st.write(f"   - ƒêang tra c·ª©u cho: **{loai_tk}**")
        try:
            wait = WebDriverWait(self.driver, 10)
            actions = ActionChains(self.driver)
            self.driver.switch_to.default_content()
            tra_cuu_menu = wait.until(EC.visibility_of_element_located(
                (By.XPATH, "//div[@class='text_memu_ngang' and contains(text(), 'Tra c·ª©u')]")))
            actions.move_to_element(tra_cuu_menu).perform()
            time.sleep(2)
            tra_cuu_tk_link = wait.until(
                EC.element_to_be_clickable((By.XPATH, "//a[contains(text(), 'Tra c·ª©u t·ªù khai')]")))
            actions.move_to_element(tra_cuu_tk_link).click().perform()
            wait.until(EC.frame_to_be_available_and_switch_to_it((By.NAME, "rframe")))
            self.driver.find_element(By.ID, "mst").clear()
            self.driver.find_element(By.ID, "mst").send_keys(self.params['mst'])
            Select(self.driver.find_element(By.ID, "maTKhai")).select_by_visible_text(loai_tk)
            self.driver.find_element(By.XPATH, "//input[@value='Tra c·ª©u']").click()
            return True
        except (TimeoutException, NoSuchElementException) as e:
            st.warning(f"L·ªói trong qu√° tr√¨nh tra c·ª©u cho '{loai_tk}': {e}")
            return False

    def analyze_and_download(self, loai_tk):
        try:
            wait = WebDriverWait(self.driver, 15)
            results_table = wait.until(EC.presence_of_element_located((By.ID, "tbl_content_search")))
            rows = results_table.find_elements(By.TAG_NAME, "tr")[1:]
            all_results = [{'ky_tinh_thue': r.find_elements(By.TAG_NAME, "td")[3].text,
                            'loai': r.find_elements(By.TAG_NAME, "td")[4].text,
                            'lan_bs': r.find_elements(By.TAG_NAME, "td")[5].text,
                            'trang_thai': r.find_elements(By.TAG_NAME, "td")[8].text,
                            'download_link': r.find_elements(By.TAG_NAME, "td")[2].find_element(By.TAG_NAME, 'a')} for r
                           in rows if len(r.find_elements(By.TAG_NAME, "td")) > 8]
            results_in_year = [r for r in all_results if str(self.params['nam_tinh_thue']) in r['ky_tinh_thue']]
            hskts_to_download = {}
            for row in results_in_year:
                if 'TMS - G√≥i tin h·∫°ch to√°n th√†nh c√¥ng' not in row['trang_thai']: continue
                ky = row['ky_tinh_thue']
                if row['loai'] == 'B·ªï sung':
                    lan_bs_hien_tai = int(row['lan_bs']) if row['lan_bs'].isdigit() else 0
                    if ky not in hskts_to_download or hskts_to_download[ky][
                        'loai'] != 'B·ªï sung' or lan_bs_hien_tai > int(hskts_to_download[ky].get('lan_bs', '0')):
                        hskts_to_download[ky] = row
                elif row['loai'] == 'Ch√≠nh th·ª©c' and ky not in hskts_to_download:
                    hskts_to_download[ky] = row
            downloaded_files_for_tk = []
            for ky, hsk_info in hskts_to_download.items():
                st.write(f"     -> ƒêang t·∫£i v·ªÅ HSKT cho k·ª≥ `{ky}`...")
                hsk_info['download_link'].click()
                time.sleep(3)
                latest_file = max([os.path.join(self.download_dir, f) for f in os.listdir(self.download_dir)],
                                  key=os.path.getctime)
                loai_tk_filename = loai_tk.split(' - ')[0].replace('/', '-')
                ky_filename = ky.replace('/', '-')
                new_filename = f"{self.params['mst']}_{loai_tk_filename}_{ky_filename}.xml"
                new_filepath = os.path.join(self.download_dir, new_filename)
                os.rename(latest_file, new_filepath)
                downloaded_files_for_tk.append(new_filepath)
            st.write(f"   -> ƒê√£ t·∫£i v·ªÅ {len(downloaded_files_for_tk)} h·ªì s∆° cho lo·∫°i t·ªù khai n√†y.")
            return downloaded_files_for_tk
        except (TimeoutException, NoSuchElementException):
            st.warning(f"Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ cho '{loai_tk}'.")
            return []
        finally:
            self.driver.switch_to.default_content()

    def close_driver(self):
        if hasattr(self, 'driver') and self.driver: self.driver.quit()


def process_summary_invoice_data(uploaded_file):
    if not uploaded_file:
        return None
    try:
        st.write("ƒêang x·ª≠ l√Ω file B·∫£ng k√™ h√≥a ƒë∆°n t·ªïng h·ª£p...")
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file, skiprows=5)
        else:
            df = pd.read_excel(uploaded_file, skiprows=5)

        df.columns = [
            'STT', 'KyHieuMauSo', 'KyHieuHoaDon', 'SoHoaDon', 'NgayLap', 'MSTNguoiBan', 'TenNguoiBan',
            'MSTNguoiMua', 'TenNguoiMua', 'DiaChiNguoiMua', 'MaSoThueToChucCungCap', 'MaSoThueToChucTruyenNhan',
            'TongTienChuaThue', 'TongTienThue', 'TongTienChietKhau', 'TongTienPhi', 'TongTienThanhToan',
            'DonViTienTe', 'TyGia', 'TrangThaiHoaDon', 'KetQuaKiemTra'
        ]

        numeric_cols = ['TongTienChuaThue', 'TongTienThue', 'TongTienChietKhau', 'TongTienThanhToan', 'TyGia']
        for col in numeric_cols:
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)

        statuses_to_sum = [
            'H√≥a ƒë∆°n m·ªõi',
            'H√≥a ƒë∆°n thay th·∫ø',
            'H√≥a ƒë∆°n ƒëi·ªÅu ch·ªânh',
            'H√≥a ƒë∆°n ƒë√£ b·ªã ƒëi·ªÅu ch·ªânh'
        ]

        invoices_for_summing = df[df['TrangThaiHoaDon'].isin(statuses_to_sum)].copy()

        for col in ['TongTienChuaThue', 'TongTienThue', 'TongTienChietKhau', 'TongTienThanhToan']:
            invoices_for_summing.loc[:, col] = invoices_for_summing.apply(
                lambda row: row[col] * row['TyGia'] if row['DonViTienTe'] != 'VND' else row[col],
                axis=1
            )

        total_pre_tax = invoices_for_summing['TongTienChuaThue'].sum()
        total_tax = invoices_for_summing['TongTienThue'].sum()
        total_discount = invoices_for_summing['TongTienChietKhau'].sum()
        total_payment = invoices_for_summing['TongTienThanhToan'].sum()

        summary = {
            'total_pre_tax': total_pre_tax,
            'total_tax': total_tax,
            'total_discount': total_discount,
            'total_payment': total_payment
        }

        st.success("X·ª≠ l√Ω B·∫£ng k√™ h√≥a ƒë∆°n t·ªïng h·ª£p ho√†n t·∫•t!")
        return {
            "valid_summary": summary,
            "full_df": df
        }
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω file h√≥a ƒë∆°n t·ªïng h·ª£p: {e}")
        return None


def process_detailed_invoice_data(uploaded_file):
    if not uploaded_file:
        return None
    try:
        st.write("ƒêang x·ª≠ l√Ω file B·∫£ng k√™ h√≥a ƒë∆°n chi ti·∫øt...")
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)

        df.columns = [
            'KyHieu', 'SoHoaDon', 'NgayLap', 'TenNguoiMua', 'MSTNguoiMua', 'TinhChat',
            'TenHangHoa', 'DonViTinh', 'SoLuong', 'DonGia', 'TienChietKhau', 'EmptyCol',
            'ThanhTien', 'ThueSuat', 'DonViTienTe', 'TyGia', 'TrangThaiHoaDon',
            'HD_LienQuan', 'Ngay_HD_LienQuan', 'DonViCungCap'
        ]
        df = df.drop(columns=['EmptyCol'])

        numeric_cols = ['SoLuong', 'DonGia', 'TienChietKhau', 'ThanhTien', 'ThueSuat', 'TyGia']
        for col in numeric_cols:
            df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
        df['NgayLap'] = pd.to_datetime(df['NgayLap'], errors='coerce')

        df['ThanhTien_TinhToan'] = df['SoLuong'] * df['DonGia']
        mismatched_invoices = df[abs(df['ThanhTien'] - df['ThanhTien_TinhToan']) > 0.01].copy()
        mismatched_invoices = mismatched_invoices[
            ['SoHoaDon', 'NgayLap', 'TenHangHoa', 'SoLuong', 'DonGia', 'ThanhTien', 'ThanhTien_TinhToan']]

        statuses_to_sum = ['H√≥a ƒë∆°n m·ªõi', 'H√≥a ƒë∆°n thay th·∫ø', 'H√≥a ƒë∆°n ƒëi·ªÅu ch·ªânh', 'H√≥a ƒë∆°n ƒë√£ b·ªã ƒëi·ªÅu ch·ªânh']
        invoices_for_summing = df[df['TrangThaiHoaDon'].isin(statuses_to_sum)].copy()

        invoices_for_summing['TienChuaThue'] = invoices_for_summing['ThanhTien'] - invoices_for_summing['TienChietKhau']
        invoices_for_summing['TienThue'] = invoices_for_summing['TienChuaThue'] * invoices_for_summing['ThueSuat']

        for col in ['TienChuaThue', 'TienThue', 'TienChietKhau']:
            invoices_for_summing.loc[:, col] = invoices_for_summing.apply(
                lambda row: row[col] * row['TyGia'] if row['DonViTienTe'] != 'VND' else row[col],
                axis=1
            )

        total_pre_tax = invoices_for_summing['TienChuaThue'].sum()
        total_tax = invoices_for_summing['TienThue'].sum()
        total_discount = invoices_for_summing['TienChietKhau'].sum()
        total_payment = total_pre_tax + total_tax

        summary = {
            'total_pre_tax': total_pre_tax,
            'total_tax': total_tax,
            'total_discount': total_discount,
            'total_payment': total_payment
        }

        st.success("X·ª≠ l√Ω B·∫£ng k√™ h√≥a ƒë∆°n chi ti·∫øt ho√†n t·∫•t!")
        return {
            "valid_summary": summary,
            "mismatch_df": mismatched_invoices,
            "full_df": df
        }
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω file h√≥a ƒë∆°n chi ti·∫øt: {e}")
        return None


def process_input_invoice_data(uploaded_files):
    if not uploaded_files:
        return None

    all_dfs = []
    try:
        st.write(f"ƒêang x·ª≠ l√Ω {len(uploaded_files)} file B·∫£ng k√™ h√≥a ƒë∆°n ƒë·∫ßu v√†o...")
        for uploaded_file in uploaded_files:
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file, skiprows=5, header=None)
            else:
                df = pd.read_excel(uploaded_file, skiprows=5, header=None)

            if len(df.columns) >= 21:
                st.info(f"ƒê√£ nh·∫≠n di·ªán file '{uploaded_file.name}' l√† m·∫´u ƒë·∫ßu v√†o lo·∫°i 1 (data-1).")
                df.columns = [
                                 'STT', 'KyHieuMauSo', 'KyHieuHoaDon', 'SoHoaDon', 'NgayLap', 'MSTNguoiBan',
                                 'TenNguoiBan', 'DiaChiNguoiBan',
                                 'MSTNguoiMua', 'TenNguoiMua', 'CCCD', 'MaSothueCCGiaiPhap', 'MaSoThueTruyenNhan',
                                 'TongTienChuaThue', 'TongTienThue', 'TongTienChietKhau', 'TongTienThanhToan',
                                 'TrangThaiHoaDon', 'KetQuaKiemTra', 'Col1', 'Col2'
                             ][:len(df.columns)]
                df = df.drop(columns=['Col1', 'Col2', 'CCCD'], errors='ignore')
            elif len(df.columns) >= 19:
                st.info(f"ƒê√£ nh·∫≠n di·ªán file '{uploaded_file.name}' l√† m·∫´u ƒë·∫ßu v√†o lo·∫°i 2 (mtt1).")
                df.columns = [
                                 'STT', 'KyHieuMauSo', 'KyHieuHoaDon', 'SoHoaDon', 'NgayLap', 'MSTNguoiBan',
                                 'TenNguoiBan', 'DiaChiNguoiBan',
                                 'MSTNguoiMua', 'TenNguoiMua', 'CCCD', 'MaSothueCCGiaiPhap', 'MaSoThueTruyenNhan',
                                 'TongTienChuaThue', 'TongTienThue', 'TongTienChietKhau', 'TongTienThanhToan',
                                 'TrangThaiHoaDon', 'KetQuaKiemTra'
                             ][:len(df.columns)]
                df = df.drop(columns=['CCCD'], errors='ignore')
            else:
                st.warning(f"Kh√¥ng th·ªÉ nh·∫≠n di·ªán m·∫´u cho file '{uploaded_file.name}'. B·ªè qua file n√†y.")
                continue

            all_dfs.append(df)

        if not all_dfs:
            st.error("Kh√¥ng c√≥ file h√≥a ƒë∆°n ƒë·∫ßu v√†o h·ª£p l·ªá n√†o ƒë∆∞·ª£c x·ª≠ l√Ω.")
            return None

        final_df = pd.concat(all_dfs, ignore_index=True)

        numeric_cols = ['TongTienChuaThue', 'TongTienThue', 'TongTienChietKhau', 'TongTienThanhToan']
        for col in numeric_cols:
            if col in final_df.columns:
                final_df[col] = pd.to_numeric(final_df[col], errors='coerce').fillna(0)

        if 'NgayLap' in final_df.columns:
            final_df['NgayLap'] = pd.to_datetime(final_df['NgayLap'], errors='coerce', dayfirst=True)

        total_pre_tax = final_df['TongTienChuaThue'].sum()
        total_tax = final_df['TongTienThue'].sum()
        total_discount = final_df['TongTienChietKhau'].sum()
        total_payment = final_df['TongTienThanhToan'].sum()

        summary = {
            'total_pre_tax': total_pre_tax,
            'total_tax': total_tax,
            'total_discount': total_discount,
            'total_payment': total_payment
        }

        st.success("X·ª≠ l√Ω B·∫£ng k√™ h√≥a ƒë∆°n ƒë·∫ßu v√†o ho√†n t·∫•t!")
        return {
            "valid_summary": summary,
            "full_df": final_df
        }
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω file h√≥a ƒë∆°n ƒë·∫ßu v√†o: {e}")
        return None


def process_financial_notes(uploaded_file):
    if not uploaded_file:
        return None
    st.write("ƒêang x·ª≠ l√Ω file Thuy·∫øt minh BCTC...")
    content = ""
    try:
        if uploaded_file.name.endswith('.docx'):
            doc = Document(uploaded_file)
            for para in doc.paragraphs:
                content += para.text + '\n'
            st.success("Tr√≠ch xu·∫•t n·ªôi dung t·ª´ file .docx th√†nh c√¥ng!")
        elif uploaded_file.name.endswith('.pdf'):
            content = "Ch·ª©c nƒÉng ƒë·ªçc file PDF s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong c√°c phi√™n b·∫£n sau."
            st.info(content)
        elif uploaded_file.name.endswith(('.xlsx', '.xls')):
            content = "Ch·ª©c nƒÉng ƒë·ªçc file Excel cho Thuy·∫øt minh BCTC s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong c√°c phi√™n b·∫£n sau."
            st.info(content)
        else:
            content = "ƒê·ªãnh d·∫°ng file n√†y ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£ ƒë·ªÉ tr√≠ch xu·∫•t n·ªôi dung."
            st.warning(content)
        return content
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω file Thuy·∫øt minh BCTC: {e}")
        return None


# --- MODULE 2 & 3: PH√ÇN T√çCH D·ªÆ LI·ªÜU & R·ª¶I RO ---
def parse_and_analyze(files, accounting_standard, output_invoice_data, input_invoice_data, notes_content):
    st.write("ƒêang x·ª≠ l√Ω, b√≥c t√°ch v√† t·ªïng h·ª£p d·ªØ li·ªáu...")
    all_declarations = []
    st.session_state['tndn_main_df'] = pd.DataFrame()
    st.session_state['tndn_appendix_df'] = pd.DataFrame()
    st.session_state['gtgt_detailed_df'] = pd.DataFrame()

    for file_path in files:
        data = parse_xml_data(file_path)
        # === G·ª† L·ªñI: HI·ªÇN TH·ªä D·ªÆ LI·ªÜU TH√î ƒê√É B√ìC T√ÅCH ===
        st.subheader(f"D·ªØ li·ªáu th√¥ t·ª´ file: {os.path.basename(file_path)}")
        st.json(data)
        # ===============================================
        if not data: continue
        ma_tk = data.get('maTKhai')
        loai_tk_code = MA_TK_MAP.get(ma_tk)
        ky = data.get('kyKKhai') or "Kh√¥ng x√°c ƒë·ªãnh"
        if loai_tk_code:
            all_declarations.append(
                {'loai_tk': loai_tk_code, 'ky': ky, 'data': data, 'filename': os.path.basename(file_path)})
            if loai_tk_code == '03/TNDN':
                st.session_state['tndn_main_df'] = generate_tndn_main_form_df(data)
                st.session_state['tndn_appendix_df'] = generate_tndn_appendix_03_1a_df(data)
            elif loai_tk_code == '01/GTGT':
                st.session_state['gtgt_detailed_df'] = generate_gtgt_detailed_df(all_declarations)

    if not all_declarations and not output_invoice_data and not input_invoice_data and not notes_content:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ ph√¢n t√≠ch.")
        return [], [], pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), pd.DataFrame(), pd.DataFrame()

    gtgt_summary_df = generate_gtgt_summary(all_declarations)
    gtgt_detailed_df = st.session_state.get('gtgt_detailed_df', pd.DataFrame())
    balance_sheet_df = generate_balance_sheet_df(all_declarations)
    income_statement_df = generate_income_statement_df(all_declarations)
    trial_balance_df = generate_trial_balance_df(all_declarations)
    tndn_summary_df = generate_tndn_summary(all_declarations)
    tncn_qtt_summary_df, tncn_details_df = generate_tncn_summary(all_declarations)
    tncn_kk_summary_df = generate_tncn_kk_summary(all_declarations)

    # === G·ª† L·ªñI: KI·ªÇM TRA C√ÅC DATAFRAME TR∆Ø·ªöC KHI TR·∫¢ V·ªÄ ===
    st.markdown("---")
    st.subheader("Tr·∫°ng th√°i D·ªØ li·ªáu (DEBUG)")
    data_status = {
        "T·ªù khai GTGT (T·ªïng h·ª£p)": not gtgt_summary_df.empty,
        "T·ªù khai GTGT (Chi ti·∫øt)": not gtgt_detailed_df.empty,
        "B·∫£ng C√¢n ƒë·ªëi K·∫ø to√°n": not balance_sheet_df.empty,
        "B√°o c√°o KQKD": not income_statement_df.empty,
        "B·∫£ng C√¢n ƒë·ªëi T√†i kho·∫£n": not trial_balance_df.empty,
        "T·ªù khai TNDN (T·ªïng h·ª£p)": not tndn_summary_df.empty,
        "T·ªù khai TNCN QTT (T·ªïng h·ª£p)": not tncn_qtt_summary_df.empty,
        "T·ªù khai TNCN QTT (Chi ti·∫øt)": not tncn_details_df.empty,
        "T·ªù khai TNCN KK (T·ªïng h·ª£p)": not tncn_kk_summary_df.empty,
    }
    st.write(data_status)
    st.markdown("---")
    # =========================================================

    st.write("ƒêang ph√¢n t√≠ch r·ªßi ro...")
    output_invoice_pre_tax_total = output_invoice_data.get('valid_summary', {}).get('total_pre_tax',
                                                                                    None) if output_invoice_data else None
    all_checks = run_risk_checks(all_declarations, gtgt_summary_df, tncn_kk_summary_df, accounting_standard,
                                 output_invoice_pre_tax_total, input_invoice_data)
    st.success("Ph√¢n t√≠ch ho√†n t·∫•t!")
    return all_declarations, all_checks, gtgt_summary_df, gtgt_detailed_df, balance_sheet_df, income_statement_df, trial_balance_df, tndn_summary_df, tncn_qtt_summary_df, tncn_details_df, tncn_kk_summary_df


def parse_xml_data(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            xml_content = f.read()
        tree = ET.fromstring(xml_content)
        data = {}

        parent_map = {c: p for p in tree.iter() for c in p}
        single_value_tags = ['maTKhai', 'kyKKhai', 'mst', 'tenNNT', 'dchiNNT', 'tenHuyenNNT', 'tenTinhNNT', 'loaiTKhai',
                             'soLan']

        for elem in tree.iter():
            if not (elem.text and elem.text.strip()):
                continue

            tag = elem.tag.split('}', 1)[-1]
            key = tag
            value = elem.text.strip()

            parent = parent_map.get(elem)
            if parent is not None:
                parent_tag = parent.tag.split('}', 1)[-1]

                if parent_tag == 'NamNay' and tag.startswith('ct'):
                    key = f"kqkd_nn_{tag}"
                elif parent_tag == 'NamTruoc' and tag.startswith('ct'):
                    key = f"kqkd_nt_{tag}"
                elif parent_tag == 'SoCuoiNam' and tag.startswith('ct'):
                    key = f"scn_{tag}"
                elif parent_tag == 'SoDauNam' and tag.startswith('ct'):
                    key = f"sdn_{tag}"
                else:
                    grandparent = parent_map.get(parent)
                    if grandparent is not None:
                        grandparent_tag = grandparent.tag.split('}', 1)[-1]
                        if grandparent_tag == 'SoPhatSinhTrongKy':
                            if parent_tag == 'No':
                                key = f"ps_no_{tag}"
                            elif parent_tag == 'Co':
                                key = f"ps_co_{tag}"
                        elif grandparent_tag == 'SoDuDauKy':
                            if parent_tag == 'No':
                                key = f"sddk_no_{tag}"
                            elif parent_tag == 'Co':
                                key = f"sddk_co_{tag}"
                        elif grandparent_tag == 'SoDuCuoiKy':
                            if parent_tag == 'No':
                                key = f"sdck_no_{tag}"
                            elif parent_tag == 'Co':
                                key = f"sdck_co_{tag}"

            if tag in single_value_tags:
                if tag not in data: data[tag] = value
            else:
                if key in data:
                    if not isinstance(data[key], list): data[key] = [data[key]]
                    data[key].append(value)
                else:
                    data[key] = value
        return data
    except (ET.ParseError, FileNotFoundError) as e:
        st.error(f"L·ªói khi ƒë·ªçc t·ªáp {os.path.basename(file_path)}: {e}")
        return {}


def get_single_value(data, key, default=0):
    value = data.get(key, default)
    try:
        if isinstance(value, list):
            return float(value[0]) if value else float(default)
        return float(value) if value is not None else float(default)
    except (ValueError, TypeError):
        return float(default)


def get_string_value(data, key, default=''):
    value = data.get(key, default)
    if isinstance(value, list):
        return str(value[0]) if value else str(default)
    return str(value) if value is not None else str(default)


def generate_gtgt_summary(declarations):
    gtgt_decls = [d for d in declarations if 'GTGT' in d['loai_tk']]
    if not gtgt_decls: return pd.DataFrame()
    periods = sorted(list(set(d['ky'] for d in gtgt_decls)))
    summary_data = {'Ch·ªâ ti√™u': ['Doanh thu ch·ªãu thu·∫ø GTGT', 'Thu·∫ø GTGT ƒë∆∞·ª£c kh·∫•u tr·ª´', 'Thu·∫ø GTGT ph·∫£i n·ªôp']}
    for period in periods:
        p_data = next((d['data'] for d in gtgt_decls if d['ky'] == period), {})
        dt_total = sum(get_single_value(p_data, tag, 0) for tag in
                       [XML_TAG_MAP['01/GTGT']['doanh_thu_kct'], XML_TAG_MAP['01/GTGT']['doanh_thu_0'],
                        XML_TAG_MAP['01/GTGT']['doanh_thu_5'], XML_TAG_MAP['01/GTGT']['doanh_thu_10']])
        thue_kt = get_single_value(p_data, XML_TAG_MAP['01/GTGT']['thue_gtgt_duoc_khau_tru'], 0)
        thue_pn = get_single_value(p_data, XML_TAG_MAP['01/GTGT']['thue_gtgt_phai_nop'], 0)
        summary_data[period] = [dt_total, thue_kt, thue_pn]
    df = pd.DataFrame(summary_data)
    if len(periods) > 0: df['T·ªïng c·ªông'] = df[periods].sum(axis=1)
    return df


def generate_gtgt_detailed_df(declarations):
    gtgt_decl = next((d for d in reversed(declarations) if '01/GTGT' in d['loai_tk']), None)
    if not gtgt_decl: return pd.DataFrame()
    data = gtgt_decl['data']

    detailed_data = {
        'M√£ ch·ªâ ti√™u': [
            '[21]', '[22]', '[23]', '[24]', '[25]', '[26]', '[29]', '[30]', '[31]',
            '[32]', '[33]', '[32a]', '[34]', '[35]', '[36]', '[37]', '[38]', '[39a]',
            '[40a]', '[40b]', '[40]', '[41]', '[42]', '[43]'
        ],
        'Ch·ªâ ti√™u': [
            'Thu·∫ø GTGT c√≤n ƒë∆∞·ª£c kh·∫•u tr·ª´ k·ª≥ tr∆∞·ªõc ch∆∞a h·∫øt',
            'Thu·∫ø GTGT c√≤n ƒë∆∞·ª£c kh·∫•u tr·ª´ k·ª≥ tr∆∞·ªõc chuy·ªÉn sang',
            'Gi√° tr·ªã c·ªßa h√†ng h√≥a, d·ªãch v·ª• mua v√†o',
            'Thu·∫ø GTGT c·ªßa HHDV mua v√†o',
            'Thu·∫ø GTGT c·ªßa HHDV mua v√†o ƒë∆∞·ª£c kh·∫•u tr·ª´ k·ª≥ n√†y',
            'HHDV b√°n ra kh√¥ng ch·ªãu thu·∫ø GTGT',
            'HHDV b√°n ra ch·ªãu thu·∫ø su·∫•t 0%',
            'Doanh thu HHDV b√°n ra ch·ªãu thu·∫ø su·∫•t 5%',
            'Thu·∫ø GTGT HHDV b√°n ra ch·ªãu thu·∫ø su·∫•t 5%',
            'Doanh thu HHDV b√°n ra ch·ªãu thu·∫ø su·∫•t 10%',
            'Thu·∫ø GTGT HHDV b√°n ra ch·ªãu thu·∫ø su·∫•t 10%',
            'HHDV b√°n ra kh√¥ng ph·∫£i k√™ khai, n·ªôp thu·∫ø GTGT',
            'T·ªïng doanh thu HHDV b√°n ra',
            'T·ªïng thu·∫ø GTGT c·ªßa HHDV b√°n ra',
            'Thu·∫ø GTGT ph√°t sinh trong k·ª≥',
            'ƒêi·ªÅu ch·ªânh gi·∫£m thu·∫ø GTGT ph·∫£i n·ªôp',
            'ƒêi·ªÅu ch·ªânh tƒÉng thu·∫ø GTGT ph·∫£i n·ªôp',
            'Thu·∫ø GTGT c·ªßa d·ª± √°n ƒë·∫ßu t∆∞ ƒë∆∞·ª£c b√π tr·ª´',
            'Thu·∫ø GTGT ph·∫£i n·ªôp c·ªßa HƒêKD',
            'Thu·∫ø GTGT mua v√†o c·ªßa d·ª± √°n ƒë·∫ßu t∆∞ c√πng t·ªânh',
            'Thu·∫ø GTGT c√≤n ph·∫£i n·ªôp trong k·ª≥',
            'Thu·∫ø GTGT ch∆∞a kh·∫•u tr·ª´ h·∫øt k·ª≥ n√†y',
            'Thu·∫ø GTGT ƒë·ªÅ ngh·ªã ho√†n',
            'Thu·∫ø GTGT c√≤n ƒë∆∞·ª£c kh·∫•u tr·ª´ chuy·ªÉn k·ª≥ sau',
        ],
        'S·ªë ti·ªÅn': [
            get_single_value(data, 'ct21'), get_single_value(data, 'ct22'), get_single_value(data, 'ct23'),
            get_single_value(data, 'ct24'), get_single_value(data, 'ct25'), get_single_value(data, 'ct26'),
            get_single_value(data, 'ct29'), get_single_value(data, 'ct30'), get_single_value(data, 'ct31'),
            get_single_value(data, 'ct32'), get_single_value(data, 'ct33'), get_single_value(data, 'ct32a'),
            get_single_value(data, 'ct34'), get_single_value(data, 'ct35'), get_single_value(data, 'ct36'),
            get_single_value(data, 'ct37'), get_single_value(data, 'ct38'), get_single_value(data, 'ct39a'),
            get_single_value(data, 'ct40a'), get_single_value(data, 'ct40b'), get_single_value(data, 'ct40'),
            get_single_value(data, 'ct41'), get_single_value(data, 'ct42'), get_single_value(data, 'ct43'),
        ]
    }
    return pd.DataFrame(detailed_data)


def generate_tndn_main_form_df(data):
    if not data: return pd.DataFrame()

    tndn_main_data = {
        'M√£ ch·ªâ ti√™u': ['A1', 'B1', 'B2', 'B3', 'B4', 'B7', 'B8', 'B9', 'B10', 'B11', 'B12', 'B13', 'B14', 'C1', 'C2',
                        'C3', 'C4', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14', 'C15', 'C16'],
        'Ch·ªâ ti√™u': [
            'A1 - T·ªïng l·ª£i nhu·∫≠n k·∫ø to√°n tr∆∞·ªõc thu·∫ø TNDN',
            'B1 - C√°c kho·∫£n ƒëi·ªÅu ch·ªânh tƒÉng t·ªïng l·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø',
            'B2 - C√°c kho·∫£n chi kh√¥ng ƒë∆∞·ª£c tr·ª´',
            'B3 - Thu·∫ø TNDN ƒë√£ n·ªôp cho ph·∫ßn thu nh·∫≠p nh·∫≠n ƒë∆∞·ª£c ·ªü n∆∞·ªõc ngo√†i',
            'B4 - ƒêi·ªÅu ch·ªânh tƒÉng doanh thu',
            'B7 - C√°c kho·∫£n ƒëi·ªÅu ch·ªânh l√†m tƒÉng l·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø kh√°c',
            'B8 - C√°c kho·∫£n ƒëi·ªÅu ch·ªânh gi·∫£m t·ªïng l·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø',
            'B9 - Gi·∫£m tr·ª´ c√°c kho·∫£n doanh thu ƒë√£ ƒëi·ªÅu ch·ªânh tƒÉng',
            'B10 - Chi ph√≠ c·ªßa ph·∫ßn doanh thu ƒëi·ªÅu ch·ªânh gi·∫£m',
            'B11 - C√°c kho·∫£n ƒëi·ªÅu ch·ªânh l√†m gi·∫£m l·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø kh√°c',
            'B12 - L·ª£i nhu·∫≠n t·ª´ ho·∫°t ƒë·ªông BƒêS',
            'B13 - T·ªïng Thu nh·∫≠p ch·ªãu thu·∫ø (TNCT)',
            'B14 - TNCT t·ª´ ho·∫°t ƒë·ªông s·∫£n xu·∫•t, kinh doanh',
            'C1 - Thu nh·∫≠p ch·ªãu thu·∫ø',
            'C2 - Thu nh·∫≠p ch·ªãu thu·∫ø t·ª´ HƒêSXKD',
            'C3 - Thu nh·∫≠p ƒë∆∞·ª£c mi·ªÖn thu·∫ø',
            'C4 - Chuy·ªÉn l·ªó v√† b√π tr·ª´ l√£i, l·ªó',
            'C6 - T·ªïng thu nh·∫≠p t√≠nh thu·∫ø (TNTT)',
            'C7 - TNTT t·ª´ HƒêSXKD',
            'C8 - Thu·∫ø TNDN t·ª´ HƒêSXKD theo thu·∫ø su·∫•t 20%',
            'C9 - Thu·∫ø TNDN ph·∫£i n·ªôp t·ª´ HƒêSXKD',
            'C10 - Thu·∫ø TNDN c·ªßa ho·∫°t ƒë·ªông BƒêS ph·∫£i n·ªôp',
            'C11 - Thu·∫ø TNDN ƒë√£ n·ªôp ·ªü n∆∞·ªõc ngo√†i ƒë∆∞·ª£c tr·ª´ trong k·ª≥ t√≠nh thu·∫ø',
            'C12 - Thu·∫ø TNDN ƒë√£ t·∫°m n·ªôp',
            'C13 - Ch√™nh l·ªách gi·ªØa s·ªë thu·∫ø TNDN ph·∫£i n·ªôp v√† ƒë√£ t·∫°m n·ªôp',
            'C14 - Thu·∫ø TNDN c√≤n ph·∫£i n·ªôp',
            'C15 - Thu·∫ø TNDN n·ªôp th·ª´a',
            'C16 - T·ªïng s·ªë thu·∫ø TNDN b√π tr·ª´ cho c√°c nghƒ©a v·ª• kh√°c',
        ],
        'S·ªë ti·ªÅn': [
            get_single_value(data, 'ctA1'), get_single_value(data, 'ctB1'), get_single_value(data, 'ctB2'),
            get_single_value(data, 'ctB3'), get_single_value(data, 'ctB4'), get_single_value(data, 'ctB7'),
            get_single_value(data, 'ctB8'), get_single_value(data, 'ctB9'), get_single_value(data, 'ctB10'),
            get_single_value(data, 'ctB11'), get_single_value(data, 'ctB12'), get_single_value(data, 'ctB13'),
            get_single_value(data, 'ctB14'), get_single_value(data, 'ctC1'), get_single_value(data, 'ctC2'),
            get_single_value(data, 'ctC3'), get_single_value(data, 'ctC4'), get_single_value(data, 'ctC6'),
            get_single_value(data, 'ctC7'), get_single_value(data, 'ctC8'), get_single_value(data, 'ctC9'),
            get_single_value(data, 'ctC10'), get_single_value(data, 'ctC11'), get_single_value(data, 'ctC12'),
            get_single_value(data, 'ctC13'), get_single_value(data, 'ctC14'), get_single_value(data, 'ctC15'),
            get_single_value(data, 'ctC16'),
        ]
    }
    return pd.DataFrame(tndn_main_data)


def generate_tndn_appendix_03_1a_df(data):
    if not data: return pd.DataFrame()

    appendix_data = {
        'M√£ ch·ªâ ti√™u': ['[04]', '[05]', '[06]', '[08]', '[09]', '[11]', '[12]', '[13]', '[14]', '[15]', '[16]', '[17]',
                        '[18]', '[19]', '[20]', '[21]', '[22]'],
        'Ch·ªâ ti√™u': [
            'T·ªïng doanh thu b√°n h√†ng h√≥a, d·ªãch v·ª•',
            'Doanh thu b√°n h√†ng h√≥a, d·ªãch v·ª• xu·∫•t kh·∫©u',
            'C√°c kho·∫£n gi·∫£m tr·ª´ doanh thu',
            'Doanh thu ho·∫°t ƒë·ªông t√†i ch√≠nh',
            'Chi ph√≠ t√†i ch√≠nh',
            'Chi ph√≠ s·∫£n xu·∫•t, kinh doanh h√†ng h√≥a, d·ªãch v·ª•',
            'Gi√° v·ªën h√†ng b√°n',
            'Chi ph√≠ b√°n h√†ng',
            'Chi ph√≠ qu·∫£n l√Ω doanh nghi·ªáp',
            'L·ª£i nhu·∫≠n thu·∫ßn t·ª´ ho·∫°t ƒë·ªông kinh doanh',
            'Thu nh·∫≠p kh√°c',
            'Chi ph√≠ kh√°c',
            'L·ª£i nhu·∫≠n kh√°c',
            'L·ª£i nhu·∫≠n t·ª´ HƒêSXKD',
            'L·ª£i nhu·∫≠n t·ª´ ho·∫°t ƒë·ªông chuy·ªÉn nh∆∞·ª£ng BƒêS',
            'T·ªïng l·ª£i nhu·∫≠n k·∫ø to√°n tr∆∞·ªõc thu·∫ø TNDN',
            'Tr√≠ch l·∫≠p qu·ªπ KH&CN (n·∫øu c√≥)'
        ],
        'S·ªë ti·ªÅn': [
            get_single_value(data, 'ct04'), get_single_value(data, 'ct05'), get_single_value(data, 'ct06'),
            get_single_value(data, 'ct08'), get_single_value(data, 'ct09'), get_single_value(data, 'ct11'),
            get_single_value(data, 'ct12'), get_single_value(data, 'ct13'), get_single_value(data, 'ct14'),
            get_single_value(data, 'ct15'), get_single_value(data, 'ct16'), get_single_value(data, 'ct17'),
            get_single_value(data, 'ct18'), get_single_value(data, 'ct19'), get_single_value(data, 'ct20'),
            get_single_value(data, 'ct21'), get_single_value(data, 'ct22'),
        ]
    }
    return pd.DataFrame(appendix_data)


def generate_balance_sheet_df(declarations):
    bctc_decl = next((d for d in declarations if 'BCTC' in d['loai_tk']), None)
    if not bctc_decl: return pd.DataFrame()
    data = bctc_decl['data']

    balance_sheet_data = {
        'Ch·ªâ ti√™u': [
            'A - T√ÄI S·∫¢N NG·∫ÆN H·∫†N', 'I. Ti·ªÅn v√† c√°c kho·∫£n t∆∞∆°ng ƒë∆∞∆°ng ti·ªÅn', 'II. ƒê·∫ßu t∆∞ t√†i ch√≠nh ng·∫Øn h·∫°n',
            'III. C√°c kho·∫£n ph·∫£i thu ng·∫Øn h·∫°n',
            'IV. H√†ng t·ªìn kho', 'V. T√†i s·∫£n ng·∫Øn h·∫°n kh√°c', 'B - T√ÄI S·∫¢N D√ÄI H·∫†N', 'I. C√°c kho·∫£n ph·∫£i thu d√†i h·∫°n',
            'II. T√†i s·∫£n c·ªë ƒë·ªãnh', 'III. B·∫•t ƒë·ªông s·∫£n ƒë·∫ßu t∆∞', 'IV. T√†i s·∫£n d·ªü dang d√†i h·∫°n',
            'V. ƒê·∫ßu t∆∞ t√†i ch√≠nh d√†i h·∫°n',
            'VI. T√†i s·∫£n d√†i h·∫°n kh√°c', 'T·ªîNG C·ªòNG T√ÄI S·∫¢N', 'C - N·ª¢ PH·∫¢I TR·∫¢', 'I. N·ª£ ng·∫Øn h·∫°n', 'II. N·ª£ d√†i h·∫°n',
            'D - V·ªêN CH·ª¶ S·ªû H·ªÆU', 'I. V·ªën ch·ªß s·ªü h·ªØu', 'T·ªîNG C·ªòNG NGU·ªíN V·ªêN'
        ],
        'M√£ s·ªë': [
            '100', '110', '120', '130', '140', '150', '200', '210', '220', '230', '240', '250', '260', '270',
            '300', '310', '330', '400', '410', '440'
        ],
        'S·ªë cu·ªëi nƒÉm': [
            get_single_value(data, 'scn_ct100'), get_single_value(data, 'scn_ct110'),
            get_single_value(data, 'scn_ct120'), get_single_value(data, 'scn_ct130'),
            get_single_value(data, 'scn_ct140'), get_single_value(data, 'scn_ct150'),
            get_single_value(data, 'scn_ct200'), get_single_value(data, 'scn_ct210'),
            get_single_value(data, 'scn_ct220'), get_single_value(data, 'scn_ct230'),
            get_single_value(data, 'scn_ct240'), get_single_value(data, 'scn_ct250'),
            get_single_value(data, 'scn_ct260'), get_single_value(data, 'scn_ct270'),
            get_single_value(data, 'scn_ct300'), get_single_value(data, 'scn_ct310'),
            get_single_value(data, 'scn_ct330'), get_single_value(data, 'scn_ct400'),
            get_single_value(data, 'scn_ct410'), get_single_value(data, 'scn_ct440')
        ],
        'S·ªë ƒë·∫ßu nƒÉm': [
            get_single_value(data, 'sdn_ct100'), get_single_value(data, 'sdn_ct110'),
            get_single_value(data, 'sdn_ct120'), get_single_value(data, 'sdn_ct130'),
            get_single_value(data, 'sdn_ct140'), get_single_value(data, 'sdn_ct150'),
            get_single_value(data, 'sdn_ct200'), get_single_value(data, 'sdn_ct210'),
            get_single_value(data, 'sdn_ct220'), get_single_value(data, 'sdn_ct230'),
            get_single_value(data, 'sdn_ct240'), get_single_value(data, 'sdn_ct250'),
            get_single_value(data, 'sdn_ct260'), get_single_value(data, 'sdn_ct270'),
            get_single_value(data, 'sdn_ct300'), get_single_value(data, 'sdn_ct310'),
            get_single_value(data, 'sdn_ct330'), get_single_value(data, 'sdn_ct400'),
            get_single_value(data, 'sdn_ct410'), get_single_value(data, 'sdn_ct440')
        ]
    }
    return pd.DataFrame(balance_sheet_data)


def generate_income_statement_df(declarations):
    bctc_decl = next((d for d in declarations if 'BCTC' in d['loai_tk']), None)
    if not bctc_decl: return pd.DataFrame()
    data = bctc_decl['data']

    income_statement_data = {
        'Ch·ªâ ti√™u': [
            '1. Doanh thu b√°n h√†ng v√† cung c·∫•p d·ªãch v·ª•', '2. C√°c kho·∫£n gi·∫£m tr·ª´ doanh thu',
            '3. Doanh thu thu·∫ßn v·ªÅ b√°n h√†ng v√† cung c·∫•p d·ªãch v·ª•',
            '4. Gi√° v·ªën h√†ng b√°n', '5. L·ª£i nhu·∫≠n g·ªôp v·ªÅ b√°n h√†ng v√† cung c·∫•p d·ªãch v·ª•',
            '6. Doanh thu ho·∫°t ƒë·ªông t√†i ch√≠nh',
            '7. Chi ph√≠ t√†i ch√≠nh', 'Trong ƒë√≥: Chi ph√≠ l√£i vay', '8. Chi ph√≠ b√°n h√†ng',
            '9. Chi ph√≠ qu·∫£n l√Ω doanh nghi·ªáp',
            '10. L·ª£i nhu·∫≠n thu·∫ßn t·ª´ ho·∫°t ƒë·ªông kinh doanh', '11. Thu nh·∫≠p kh√°c', '12. Chi ph√≠ kh√°c',
            '13. L·ª£i nhu·∫≠n kh√°c', '14. T·ªïng l·ª£i nhu·∫≠n k·∫ø to√°n tr∆∞·ªõc thu·∫ø', '15. Chi ph√≠ thu·∫ø TNDN hi·ªán h√†nh',
            '16. Chi ph√≠ thu·∫ø TNDN ho√£n l·∫°i', '17. L·ª£i nhu·∫≠n sau thu·∫ø thu nh·∫≠p doanh nghi·ªáp'
        ],
        'M√£ s·ªë': [
            '01', '02', '10', '11', '20', '21', '22', '23', '25', '26', '30', '31', '32', '40', '50', '51', '52', '60'
        ],
        'NƒÉm nay': [
            get_single_value(data, 'kqkd_nn_ct01'), get_single_value(data, 'kqkd_nn_ct02'),
            get_single_value(data, 'kqkd_nn_ct10'),
            get_single_value(data, 'kqkd_nn_ct11'), get_single_value(data, 'kqkd_nn_ct20'),
            get_single_value(data, 'kqkd_nn_ct21'),
            get_single_value(data, 'kqkd_nn_ct22'), get_single_value(data, 'kqkd_nn_ct23'),
            get_single_value(data, 'kqkd_nn_ct25'),
            get_single_value(data, 'kqkd_nn_ct26'), get_single_value(data, 'kqkd_nn_ct30'),
            get_single_value(data, 'kqkd_nn_ct31'),
            get_single_value(data, 'kqkd_nn_ct32'), get_single_value(data, 'kqkd_nn_ct40'),
            get_single_value(data, 'kqkd_nn_ct50'),
            get_single_value(data, 'kqkd_nn_ct51'), get_single_value(data, 'kqkd_nn_ct52'),
            get_single_value(data, 'kqkd_nn_ct60')
        ],
        'NƒÉm tr∆∞·ªõc': [
            get_single_value(data, 'kqkd_nt_ct01'), get_single_value(data, 'kqkd_nt_ct02'),
            get_single_value(data, 'kqkd_nt_ct10'),
            get_single_value(data, 'kqkd_nt_ct11'), get_single_value(data, 'kqkd_nt_ct20'),
            get_single_value(data, 'kqkd_nt_ct21'),
            get_single_value(data, 'kqkd_nt_ct22'), get_single_value(data, 'kqkd_nt_ct23'),
            get_single_value(data, 'kqkd_nt_ct25'),
            get_single_value(data, 'kqkd_nt_ct26'), get_single_value(data, 'kqkd_nt_ct30'),
            get_single_value(data, 'kqkd_nt_ct31'),
            get_single_value(data, 'kqkd_nt_ct32'), get_single_value(data, 'kqkd_nt_ct40'),
            get_single_value(data, 'kqkd_nt_ct50'),
            get_single_value(data, 'kqkd_nt_ct51'), get_single_value(data, 'kqkd_nt_ct52'),
            get_single_value(data, 'kqkd_nt_ct60')
        ]
    }
    return pd.DataFrame(income_statement_data)


def generate_trial_balance_df(declarations):
    bctc_decl = next((d for d in declarations if 'BCTC' in d['loai_tk']), None)
    if not bctc_decl: return pd.DataFrame()
    data = bctc_decl['data']

    accounts = {
        "ct111": "Ti·ªÅn m·∫∑t", "ct112": "Ti·ªÅn g·ª≠i ng√¢n h√†ng", "ct121": "Ch·ª©ng kho√°n kinh doanh",
        "ct128": "ƒê·∫ßu t∆∞ n·∫Øm gi·ªØ ƒë·∫øn ng√†y ƒë√°o h·∫°n",
        "ct131": "Ph·∫£i thu c·ªßa kh√°ch h√†ng", "ct133": "Thu·∫ø GTGT ƒë∆∞·ª£c kh·∫•u tr·ª´", "ct141": "T·∫°m ·ª©ng",
        "ct152": "Nguy√™n li·ªáu, v·∫≠t li·ªáu",
        "ct153": "C√¥ng c·ª•, d·ª•ng c·ª•", "ct154": "Chi ph√≠ SX, KD d·ªü dang", "ct155": "Th√†nh ph·∫©m", "ct156": "H√†ng h√≥a",
        "ct157": "H√†ng g·ª≠i ƒëi b√°n", "ct211": "TSCƒê h·ªØu h√¨nh", "ct214": "Hao m√≤n TSCƒê", "ct242": "Chi ph√≠ tr·∫£ tr∆∞·ªõc",
        "ct331": "Ph·∫£i tr·∫£ cho ng∆∞·ªùi b√°n", "ct333": "Thu·∫ø v√† c√°c kho·∫£n ph·∫£i n·ªôp NN", "ct334": "Ph·∫£i tr·∫£ ng∆∞·ªùi lao ƒë·ªông",
        "ct338": "Ph·∫£i tr·∫£, ph·∫£i n·ªôp kh√°c", "ct341": "Vay v√† n·ª£ thu√™ t√†i ch√≠nh", "ct411": "V·ªën ƒë·∫ßu t∆∞ c·ªßa ch·ªß s·ªü h·ªØu",
        "ct421": "L·ª£i nhu·∫≠n sau thu·∫ø ch∆∞a ph√¢n ph·ªëi", "ct511": "Doanh thu b√°n h√†ng v√† CCDV",
        "ct632": "Gi√° v·ªën h√†ng b√°n",
        "ct641": "Chi ph√≠ b√°n h√†ng", "ct642": "Chi ph√≠ qu·∫£n l√Ω doanh nghi·ªáp", "ct711": "Thu nh·∫≠p kh√°c",
        "ct811": "Chi ph√≠ kh√°c",
        "ct911": "X√°c ƒë·ªãnh k·∫øt qu·∫£ kinh doanh"
    }

    trial_balance_data = []
    for code, name in accounts.items():
        sddk_no = get_single_value(data, f'sddk_no_{code}', 0)
        sddk_co = get_single_value(data, f'sddk_co_{code}', 0)
        ps_no = get_single_value(data, f'ps_no_{code}', 0)
        ps_co = get_single_value(data, f'ps_co_{code}', 0)
        sdck_no = get_single_value(data, f'sdck_no_{code}', 0)
        sdck_co = get_single_value(data, f'sdck_co_{code}', 0)

        if any([sddk_no, sddk_co, ps_no, ps_co, sdck_no, sdck_co]):
            trial_balance_data.append({
                'S·ªë hi·ªáu TK': code.replace('ct', ''),
                'T√™n t√†i kho·∫£n': name,
                'S·ªë d∆∞ ƒë·∫ßu k·ª≥ - N·ª£': sddk_no,
                'S·ªë d∆∞ ƒë·∫ßu k·ª≥ - C√≥': sddk_co,
                'S·ªë ph√°t sinh trong k·ª≥ - N·ª£': ps_no,
                'S·ªë ph√°t sinh trong k·ª≥ - C√≥': ps_co,
                'S·ªë d∆∞ cu·ªëi k·ª≥ - N·ª£': sdck_no,
                'S·ªë d∆∞ cu·ªëi k·ª≥ - C√≥': sdck_co,
            })

    return pd.DataFrame(trial_balance_data)


def generate_tndn_summary(declarations):
    tndn_decl = next((d for d in declarations if 'TNDN' in d['loai_tk']), None)
    if not tndn_decl: return pd.DataFrame()
    data = tndn_decl['data']
    summary_data = {
        'Ch·ªâ ti√™u': ['T·ªïng DT b√°n h√†ng v√† cung c·∫•p d·ªãch v·ª• (PL 03-1A)', 'T·ªïng chi ph√≠ (PL 03-1A)',
                     'L·ª£i nhu·∫≠n k·∫ø to√°n tr∆∞·ªõc thu·∫ø (TK ch√≠nh)', 'Thu nh·∫≠p kh√°c (PL 03-1A)',
                     'Thu·∫ø TNDN ph·∫£i n·ªôp (TK ch√≠nh)'],
        'S·ªë ti·ªÅn (VND)': [
            get_single_value(data, XML_TAG_MAP['03/TNDN']['tong_doanh_thu_pl'], 0),
            get_single_value(data, XML_TAG_MAP['03/TNDN']['chi_phi'], 0),
            get_single_value(data, XML_TAG_MAP['03/TNDN']['loi_nhuan_truoc_thue'], 0),
            get_single_value(data, XML_TAG_MAP['03/TNDN']['thu_nhap_khac'], 0),
            get_single_value(data, XML_TAG_MAP['03/TNDN']['thue_tndn_phai_nop'], 0),
        ]}
    return pd.DataFrame(summary_data)


def generate_tncn_summary(declarations):
    tncn_decl = next((d for d in declarations if '05/QTT-TNCN' in d['loai_tk']), None)
    if not tncn_decl: return pd.DataFrame(), pd.DataFrame()
    data = tncn_decl['data']
    summary_data = {
        'Ch·ªâ ti√™u': ['T·ªïng s·ªë lao ƒë·ªông', 'T·ªïng thu nh·∫≠p ch·ªãu thu·∫ø tr·∫£ cho c√° nh√¢n', 'T·ªïng s·ªë thu·∫ø TNCN ƒë√£ kh·∫•u tr·ª´'],
        'S·ªë li·ªáu': [
            int(get_single_value(data, XML_TAG_MAP['05/QTT-TNCN']['tong_so_ld'], 0)),
            get_single_value(data, XML_TAG_MAP['05/QTT-TNCN']['tong_tnct'], 0),
            get_single_value(data, XML_TAG_MAP['05/QTT-TNCN']['tong_thue_da_khau_tru'], 0),
        ]}
    summary_df = pd.DataFrame(summary_data)

    def to_list(value):
        if value is None: return []
        return value if isinstance(value, list) else [value]

    details_data = {
        'H·ªç v√† t√™n': to_list(data.get(XML_TAG_MAP['05/QTT-TNCN']['pl_ho_ten'])),
        'M√£ s·ªë thu·∫ø': to_list(data.get(XML_TAG_MAP['05/QTT-TNCN']['pl_mst'])),
        'T·ªïng TNCT (VND)': [float(x or 0) for x in to_list(data.get(XML_TAG_MAP['05/QTT-TNCN']['pl_tnct']))],
        'S·ªë thu·∫ø ƒë√£ kh·∫•u tr·ª´ (VND)': [float(x or 0) for x in
                                      to_list(data.get(XML_TAG_MAP['05/QTT-TNCN']['pl_thue_da_khau_tru']))],
    }
    try:
        max_len = max(len(v) for v in details_data.values()) if details_data else 0
        for k, v in details_data.items():
            if len(v) < max_len:
                v.extend([None] * (max_len - len(v)))
        details_df = pd.DataFrame(details_data)
    except (ValueError, TypeError):
        details_df = pd.DataFrame()
    return summary_df, details_df


def generate_tncn_kk_summary(declarations):
    tncn_decls = [d for d in declarations if '05/KK-TNCN' in d['loai_tk']]
    if not tncn_decls: return pd.DataFrame()
    periods = sorted(list(set(d['ky'] for d in tncn_decls)))
    summary_data = {
        'Ch·ªâ ti√™u': ['T·ªïng s·ªë ng∆∞·ªùi lao ƒë·ªông', 'T·ªïng TNCT tr·∫£ cho c√° nh√¢n', 'T·ªïng s·ªë thu·∫ø TNCN ƒë√£ kh·∫•u tr·ª´']}
    for period in periods:
        p_data = next((d['data'] for d in tncn_decls if d['ky'] == period), {})
        tong_ld = get_single_value(p_data, XML_TAG_MAP['05/KK-TNCN']['tong_so_ld'], 0)
        tong_tnct = get_single_value(p_data, XML_TAG_MAP['05/KK-TNCN']['tong_tnct'], 0)
        tong_thue = get_single_value(p_data, XML_TAG_MAP['05/KK-TNCN']['tong_thue_da_khau_tru'], 0)
        summary_data[period] = [tong_ld, tong_tnct, tong_thue]
    df = pd.DataFrame(summary_data)
    if len(periods) > 0: df['T·ªïng c·ªông'] = df[periods].sum(axis=1)
    return df


def run_risk_checks(declarations, gtgt_summary_df, tncn_kk_summary_df, accounting_standard,
                    output_invoice_pre_tax_total=None, input_invoice_data=None):
    results = []
    tndn_decl = next((d for d in declarations if 'TNDN' in d['loai_tk']), None)
    bctc_decl = next((d for d in declarations if 'BCTC' in d['loai_tk']), None)
    tncn_qtt_decl = next((d for d in declarations if '05/QTT-TNCN' in d['loai_tk']), None)

    tong_dt_gtgt = 0
    dt_tndn = 0
    if tndn_decl and not gtgt_summary_df.empty:
        tong_dt_gtgt_series = gtgt_summary_df.loc[
            gtgt_summary_df['Ch·ªâ ti√™u'] == 'Doanh thu ch·ªãu thu·∫ø GTGT', 'T·ªïng c·ªông']
        tong_dt_gtgt = tong_dt_gtgt_series.iloc[0] if not tong_dt_gtgt_series.empty else 0
        dt_tndn_pl = get_single_value(tndn_decl['data'], XML_TAG_MAP['03/TNDN']['tong_doanh_thu_pl'], 0)
        tn_khac_tndn = get_single_value(tndn_decl['data'], XML_TAG_MAP['03/TNDN']['thu_nhap_khac'], 0)
        dt_tndn = dt_tndn_pl + tn_khac_tndn
        chenh_lech = tong_dt_gtgt - dt_tndn
        results.append({
            "N·ªôi dung": "Doanh thu GTGT vs. Doanh thu TNDN",
            "S·ªë li·ªáu A": f"{tong_dt_gtgt:,.0f} (TK GTGT)",
            "S·ªë li·ªáu B": f"{dt_tndn:,.0f} (QT TNDN)",
            "Ch√™nh l·ªách": f"{chenh_lech:,.0f}",
            "Tr·∫°ng th√°i": "C·∫£nh b√°o" if chenh_lech != 0 else "Kh·ªõp",
            "G·ª£i √Ω": "ƒê·ªëi chi·∫øu DT b√°n ra tr√™n t·ªù khai GTGT v√† QT TNDN."
        })
    else:
        results.append({"N·ªôi dung": "Doanh thu GTGT vs. Doanh thu TNDN", "S·ªë li·ªáu A": "N/A", "S·ªë li·ªáu B": "N/A",
                        "Ch√™nh l·ªách": "N/A", "Tr·∫°ng th√°i": "Kh√¥ng ƒë·ªß d·ªØ li·ªáu",
                        "G·ª£i √Ω": "C·∫ßn t·∫£i l√™n c·∫£ TK GTGT nƒÉm v√† QT TNDN."})

    if output_invoice_pre_tax_total is not None:
        if not gtgt_summary_df.empty and tong_dt_gtgt > 0:
            chenh_lech_gtgt = tong_dt_gtgt - output_invoice_pre_tax_total
            results.append({
                "N·ªôi dung": "Doanh thu GTGT vs. B·∫£ng k√™ h√≥a ƒë∆°n",
                "S·ªë li·ªáu A": f"{tong_dt_gtgt:,.0f} (TK GTGT)",
                "S·ªë li·ªáu B": f"{output_invoice_pre_tax_total:,.0f} (B·∫£ng k√™ Hƒê)",
                "Ch√™nh l·ªách": f"{chenh_lech_gtgt:,.0f}",
                "Tr·∫°ng th√°i": "C·∫£nh b√°o" if chenh_lech_gtgt != 0 else "Kh·ªõp",
                "G·ª£i √Ω": "Ki·ªÉm tra ch√™nh l·ªách gi·ªØa t·ªïng doanh thu tr√™n c√°c t·ªù khai GTGT v√† t·ªïng doanh thu t·ª´ b·∫£ng k√™ h√≥a ƒë∆°n b√°n ra."
            })
        if tndn_decl and dt_tndn > 0:
            chenh_lech_tndn = dt_tndn - output_invoice_pre_tax_total
            results.append({
                "N·ªôi dung": "Doanh thu TNDN vs. B·∫£ng k√™ h√≥a ƒë∆°n",
                "S·ªë li·ªáu A": f"{dt_tndn:,.0f} (QT TNDN)",
                "S·ªë li·ªáu B": f"{output_invoice_pre_tax_total:,.0f} (B·∫£ng k√™ Hƒê)",
                "Ch√™nh l·ªách": f"{chenh_lech_tndn:,.0f}",
                "Tr·∫°ng th√°i": "C·∫£nh b√°o" if chenh_lech_tndn != 0 else "Kh·ªõp",
                "G·ª£i √Ω": "Ki·ªÉm tra ch√™nh l·ªách gi·ªØa t·ªïng doanh thu tr√™n Quy·∫øt to√°n TNDN v√† t·ªïng doanh thu t·ª´ b·∫£ng k√™ h√≥a ƒë∆°n b√°n ra."
            })
    else:
        results.append({"N·ªôi dung": "ƒê·ªëi chi·∫øu B·∫£ng k√™ h√≥a ƒë∆°n b√°n ra", "S·ªë li·ªáu A": "N/A", "S·ªë li·ªáu B": "N/A",
                        "Ch√™nh l·ªách": "N/A", "Tr·∫°ng th√°i": "Kh√¥ng ƒë·ªß d·ªØ li·ªáu",
                        "G·ª£i √Ω": "H√£y t·∫£i l√™n B·∫£ng k√™ h√≥a ƒë∆°n b√°n ra ƒë·ªÉ th·ª±c hi·ªán ƒë·ªëi chi·∫øu."})

    if tncn_qtt_decl and not tncn_kk_summary_df.empty:
        tong_thue_kk_series = tncn_kk_summary_df.loc[
            tncn_kk_summary_df['Ch·ªâ ti√™u'] == 'T·ªïng s·ªë thu·∫ø TNCN ƒë√£ kh·∫•u tr·ª´', 'T·ªïng c·ªông']
        tong_thue_kk = tong_thue_kk_series.iloc[0] if not tong_thue_kk_series.empty else 0

        thue_qtt = get_single_value(tncn_qtt_decl['data'], XML_TAG_MAP['05/QTT-TNCN']['tong_thue_da_khau_tru'], 0)
        chenh_lech_tncn = tong_thue_kk - thue_qtt
        results.append({
            "N·ªôi dung": "ƒê·ªëi chi·∫øu thu·∫ø TNCN kh·∫•u tr·ª´ (Khai k·ª≥ vs. Quy·∫øt to√°n)",
            "S·ªë li·ªáu A": f"{tong_thue_kk:,.0f} (T·ªïng c√°c k·ª≥)",
            "S·ªë li·ªáu B": f"{thue_qtt:,.0f} (Quy·∫øt to√°n nƒÉm)",
            "Ch√™nh l·ªách": f"{chenh_lech_tncn:,.0f}",
            "Tr·∫°ng th√°i": "C·∫£nh b√°o" if chenh_lech_tncn != 0 else "Kh·ªõp",
            "G·ª£i √Ω": "ƒê·ªëi chi·∫øu t·ªïng s·ªë thu·∫ø TNCN ƒë√£ kh·∫•u tr·ª´ tr√™n c√°c t·ªù khai 05/KK-TNCN v·ªõi ch·ªâ ti√™u [31] tr√™n t·ªù khai 05/QTT-TNCN."
        })
    else:
        results.append({"N·ªôi dung": "ƒê·ªëi chi·∫øu thu·∫ø TNCN kh·∫•u tr·ª´ (Khai k·ª≥ vs. Quy·∫øt to√°n)", "S·ªë li·ªáu A": "N/A",
                        "S·ªë li·ªáu B": "N/A",
                        "Ch√™nh l·ªách": "N/A", "Tr·∫°ng th√°i": "Kh√¥ng ƒë·ªß d·ªØ li·ªáu",
                        "G·ª£i √Ω": "C·∫ßn t·∫£i l√™n c·∫£ t·ªù khai 05/KK-TNCN (th√°ng/qu√Ω) v√† t·ªù khai 05/QTT-TNCN (nƒÉm)."})

    # C·∫¨P NH·∫¨T: Logic ƒë·ªëi chi·∫øu thu·∫ø GTGT ƒë·∫ßu v√†o
    gtgt_decls_data = [d['data'] for d in declarations if '01/GTGT' in d['loai_tk']]
    if input_invoice_data and gtgt_decls_data:
        total_ct23_from_tk = sum(get_single_value(data, 'ct23') for data in gtgt_decls_data)
        total_ct24_from_tk = sum(get_single_value(data, 'ct24') for data in gtgt_decls_data)
        total_ct25_from_tk = sum(get_single_value(data, 'ct25') for data in gtgt_decls_data)

        total_pre_tax_from_invoice = input_invoice_data.get('valid_summary', {}).get('total_pre_tax', 0)
        total_tax_from_invoice = input_invoice_data.get('valid_summary', {}).get('total_tax', 0)

        chenh_lech_ct23 = total_ct23_from_tk - total_pre_tax_from_invoice
        results.append({
            "N·ªôi dung": "GTGT ƒë·∫ßu v√†o: HHDV mua v√†o (TK vs B·∫£ng k√™)",
            "S·ªë li·ªáu A": f"{total_ct23_from_tk:,.0f} (TK GTGT - CT23)",
            "S·ªë li·ªáu B": f"{total_pre_tax_from_invoice:,.0f} (B·∫£ng k√™ Hƒê v√†o)",
            "Ch√™nh l·ªách": f"{chenh_lech_ct23:,.0f}",
            "Tr·∫°ng th√°i": "C·∫£nh b√°o" if abs(chenh_lech_ct23) > 1 else "Kh·ªõp",
            "G·ª£i √Ω": "ƒê·ªëi chi·∫øu t·ªïng gi√° tr·ªã HHDV mua v√†o tr√™n c√°c t·ªù khai GTGT v·ªõi t·ªïng ti·ªÅn ch∆∞a thu·∫ø tr√™n b·∫£ng k√™ h√≥a ƒë∆°n ƒë·∫ßu v√†o."
        })

        chenh_lech_24_25 = total_ct24_from_tk - total_ct25_from_tk
        results.append({
            "N·ªôi dung": "GTGT ƒë·∫ßu v√†o: Thu·∫ø mua v√†o vs Thu·∫ø ƒë∆∞·ª£c kh·∫•u tr·ª´ (tr√™n TK)",
            "S·ªë li·ªáu A": f"{total_ct24_from_tk:,.0f} (TK GTGT - CT24)",
            "S·ªë li·ªáu B": f"{total_ct25_from_tk:,.0f} (TK GTGT - CT25)",
            "Ch√™nh l·ªách": f"{chenh_lech_24_25:,.0f}",
            "Tr·∫°ng th√°i": "C·∫£nh b√°o" if chenh_lech_24_25 != 0 else "OK",
            "G·ª£i √Ω": "Ki·ªÉm tra l√Ω do kh√¥ng ƒë∆∞·ª£c kh·∫•u tr·ª´ to√†n b·ªô thu·∫ø GTGT ƒë·∫ßu v√†o (n·∫øu c√≥)."
        })

        chenh_lech_ct25 = total_ct25_from_tk - total_tax_from_invoice
        results.append({
            "N·ªôi dung": "GTGT ƒë·∫ßu v√†o: Thu·∫ø ƒë∆∞·ª£c kh·∫•u tr·ª´ (TK vs B·∫£ng k√™)",
            "S·ªë li·ªáu A": f"{total_ct25_from_tk:,.0f} (TK GTGT - CT25)",
            "S·ªë li·ªáu B": f"{total_tax_from_invoice:,.0f} (B·∫£ng k√™ Hƒê v√†o)",
            "Ch√™nh l·ªách": f"{chenh_lech_ct25:,.0f}",
            "Tr·∫°ng th√°i": "C·∫£nh b√°o" if abs(chenh_lech_ct25) > 1 else "Kh·ªõp",
            "G·ª£i √Ω": "ƒê·ªëi chi·∫øu t·ªïng thu·∫ø GTGT ƒë∆∞·ª£c kh·∫•u tr·ª´ tr√™n c√°c t·ªù khai v·ªõi t·ªïng ti·ªÅn thu·∫ø tr√™n b·∫£ng k√™ h√≥a ƒë∆°n ƒë·∫ßu v√†o."
        })
    else:
        results.append({"N·ªôi dung": "ƒê·ªëi chi·∫øu thu·∫ø GTGT ƒë·∫ßu v√†o", "S·ªë li·ªáu A": "N/A", "S·ªë li·ªáu B": "N/A",
                        "Ch√™nh l·ªách": "N/A", "Tr·∫°ng th√°i": "Kh√¥ng ƒë·ªß d·ªØ li·ªáu",
                        "G·ª£i √Ω": "C·∫ßn t·∫£i l√™n c·∫£ t·ªù khai GTGT v√† B·∫£ng k√™ h√≥a ƒë∆°n ƒë·∫ßu v√†o."})

    if bctc_decl:
        if accounting_standard == "Ch∆∞a ch·ªçn":
            results.append({"N·ªôi dung": "Ph√¢n t√≠ch BCTC", "S·ªë li·ªáu A": "N/A", "S·ªë li·ªáu B": "N/A", "Ch√™nh l·ªách": "N/A",
                            "Tr·∫°ng th√°i": "Kh√¥ng ƒë·ªß d·ªØ li·ªáu",
                            "G·ª£i √Ω": "Vui l√≤ng ch·ªçn Ch·∫ø ƒë·ªô k·∫ø to√°n (TT133/TT200) ƒë·ªÉ th·ª±c hi·ªán ƒë·ªëi chi·∫øu BCTC."})

        elif accounting_standard == "Th√¥ng t∆∞ 133":
            bctc_data = bctc_decl.get('data', {})
            doanh_thu_kqkd = get_single_value(bctc_data, 'kqkd_nn_ct01', 0)
            tien_mat = get_single_value(bctc_data, 'scn_ct110', 0)
            chi_phi_lai_vay = get_single_value(bctc_data, 'kqkd_nn_ct23', 0)
            is_risk = tien_mat > 1000000000 and chi_phi_lai_vay > 0
            results.append({
                "N·ªôi dung": "Chi ph√≠ l√£i vay b·∫•t th∆∞·ªùng",
                "S·ªë li·ªáu A": f"{tien_mat:,.0f} (Ti·ªÅn)",
                "S·ªë li·ªáu B": f"{chi_phi_lai_vay:,.0f} (CP L√£i vay)",
                "Ch√™nh l·ªách": "N/A",
                "Tr·∫°ng th√°i": "C·∫£nh b√°o" if is_risk else "OK",
                "G·ª£i √Ω": "Xem x√©t t√≠nh h·ª£p l√Ω khi c√≥ l∆∞·ª£ng ti·ªÅn m·∫∑t l·ªõn nh∆∞ng v·∫´n ƒëi vay."
            })

            ps_no_131 = get_single_value(bctc_data, 'ps_no_ct131', 0)
            ps_co_511 = get_single_value(bctc_data, 'ps_co_ct511', 0)
            ps_co_3331 = get_single_value(bctc_data, 'ps_co_ct3331', 0)
            ps_co_711 = get_single_value(bctc_data, 'ps_co_ct711', 0)
            tong_co = ps_co_511 + ps_co_3331 + ps_co_711
            chenh_lech_131 = ps_no_131 - tong_co
            goi_y_131 = "OK"
            if chenh_lech_131 > 0:
                goi_y_131 = "PS N·ª£ 131 > PS C√≥ (511+3331+711). R·ªßi ro ghi nh·∫≠n thi·∫øu doanh thu."
            elif chenh_lech_131 < 0:
                goi_y_131 = "PS N·ª£ 131 < PS C√≥ (511+3331+711). Y√™u c·∫ßu l√†m r√µ, ƒë·ªëi chi·∫øu TK ƒë·ªëi ·ª©ng."
            results.append({
                "N·ªôi dung": "ƒê·ªëi chi·∫øu PS N·ª£ TK 131",
                "S·ªë li·ªáu A": f"{ps_no_131:,.0f} (PS N·ª£ 131)",
                "S·ªë li·ªáu B": f"{tong_co:,.0f} (PS C√≥ 511+3331+711)",
                "Ch√™nh l·ªách": f"{chenh_lech_131:,.0f}",
                "Tr·∫°ng th√°i": "C·∫£nh b√°o" if chenh_lech_131 != 0 else "Kh·ªõp",
                "G·ª£i √Ω": goi_y_131
            })

            ps_co_512 = get_single_value(bctc_data, 'ps_co_ct512', 0)
            tong_ps_co_dt = ps_co_511 + ps_co_512
            chenh_lech_dt = doanh_thu_kqkd - tong_ps_co_dt
            results.append({
                "N·ªôi dung": "Doanh thu tr√™n KQKD vs CƒêTK",
                "S·ªë li·ªáu A": f"{doanh_thu_kqkd:,.0f} (KQKD)",
                "S·ªë li·ªáu B": f"{tong_ps_co_dt:,.0f} (PS C√≥ 511+512)",
                "Ch√™nh l·ªách": f"{chenh_lech_dt:,.0f}",
                "Tr·∫°ng th√°i": "C·∫£nh b√°o" if chenh_lech_dt != 0 else "Kh·ªõp",
                "G·ª£i √Ω": "ƒê·ªëi chi·∫øu s·ªë li·ªáu doanh thu gi·ªØa c√°c ph·ª• l·ª•c BCTC."
            })

            ps_co_154 = get_single_value(bctc_data, 'ps_co_ct154', 0)
            ps_no_155 = get_single_value(bctc_data, 'ps_no_ct155', 0)
            chenh_lech_154_155 = ps_no_155 - ps_co_154
            goi_y_154_155 = "OK"
            if chenh_lech_154_155 != 0:
                if chenh_lech_154_155 > 0:
                    goi_y_154_155 = "PS N·ª£ 155 > PS C√≥ 154. Y√™u c·∫ßu ƒë·ªëi chi·∫øu v·ªõi PS N·ª£ 632 v√† PS C√≥ 511/512."
                else:
                    goi_y_154_155 = "PS C√≥ 154 > PS N·ª£ 155. D·∫•u hi·ªáu b√°n h√†ng kh√¥ng nh·∫≠p kho, bi·∫øu t·∫∑ng kh√¥ng ghi nh·∫≠n doanh thu."
            results.append({
                "N·ªôi dung": "Chi ph√≠ d·ªü dang vs. Th√†nh ph·∫©m (TK 154 vs 155)",
                "S·ªë li·ªáu A": f"{ps_co_154:,.0f} (PS C√≥ 154)",
                "S·ªë li·ªáu B": f"{ps_no_155:,.0f} (PS N·ª£ 155)",
                "Ch√™nh l·ªách": f"{chenh_lech_154_155:,.0f}",
                "Tr·∫°ng th√°i": "C·∫£nh b√°o" if chenh_lech_154_155 != 0 else "Kh·ªõp",
                "G·ª£i √Ω": goi_y_154_155
            })

            ps_no_621 = get_single_value(bctc_data, 'ps_no_ct621', 0)
            ps_no_622 = get_single_value(bctc_data, 'ps_no_ct622', 0)
            ps_no_627 = get_single_value(bctc_data, 'ps_no_ct627', 0)
            tong_chi_phi_sx = ps_no_621 + ps_no_622 + ps_no_627
            chenh_lech_cpsx = ps_co_154 - tong_chi_phi_sx
            results.append({
                "N·ªôi dung": "K·∫øt chuy·ªÉn chi ph√≠ SX (TK 154 vs 621, 622, 627)",
                "S·ªë li·ªáu A": f"{ps_co_154:,.0f} (PS C√≥ 154)",
                "S·ªë li·ªáu B": f"{tong_chi_phi_sx:,.0f} (PS N·ª£ 621+622+627)",
                "Ch√™nh l·ªách": f"{chenh_lech_cpsx:,.0f}",
                "Tr·∫°ng th√°i": "C·∫£nh b√°o" if chenh_lech_cpsx != 0 else "Kh·ªõp",
                "G·ª£i √Ω": "Ki·ªÉm tra vi·ªác k·∫øt chuy·ªÉn chi ph√≠ s·∫£n xu·∫•t v√†o TK 154."
            })

            hang_ban_tra_lai = get_single_value(bctc_data, 'kqkd_nn_ct02', 0)
            results.append({
                "N·ªôi dung": "H√†ng b√°n tr·∫£ l·∫°i",
                "S·ªë li·ªáu A": f"{hang_ban_tra_lai:,.0f} (Gi·∫£m tr·ª´ DT)",
                "S·ªë li·ªáu B": "N/A", "Ch√™nh l·ªách": "N/A",
                "Tr·∫°ng th√°i": "C·∫£nh b√°o" if hang_ban_tra_lai > 0 else "OK",
                "G·ª£i √Ω": "C√≥ ph√°t sinh h√†ng b√°n tr·∫£ l·∫°i. Y√™u c·∫ßu cung c·∫•p chi ti·∫øt PS C√≥ TK 632 ƒë·ªÉ ki·ªÉm tra vi·ªác gi·∫£m gi√° v·ªën." if hang_ban_tra_lai > 0 else "Kh√¥ng c√≥ h√†ng b√°n tr·∫£ l·∫°i."
            })

            ps_co_152 = get_single_value(bctc_data, 'ps_co_ct152', 0)
            chenh_lech_152_621 = ps_co_152 - ps_no_621
            goi_y_152_621 = "OK"
            if chenh_lech_152_621 < 0:
                goi_y_152_621 = "PS C√≥ 152 < PS N·ª£ 621. Nghi v·∫•n ghi nh·∫≠n chi ph√≠ NVL nh∆∞ng kh√¥ng xu·∫•t kho (thi·∫øu h√≥a ƒë∆°n)."
            elif chenh_lech_152_621 > 0:
                goi_y_152_621 = "PS C√≥ 152 > PS N·ª£ 621. D·∫•u hi·ªáu xu·∫•t NVL ƒë·ªÉ trao ƒë·ªïi/b√°n kh√¥ng ghi nh·∫≠n doanh thu."
            results.append({
                "N·ªôi dung": "Xu·∫•t kho NVL vs. Chi ph√≠ NVL (TK 152 vs 621)",
                "S·ªë li·ªáu A": f"{ps_co_152:,.0f} (PS C√≥ 152)",
                "S·ªë li·ªáu B": f"{ps_no_621:,.0f} (PS N·ª£ 621)",
                "Ch√™nh l·ªách": f"{chenh_lech_152_621:,.0f}",
                "Tr·∫°ng th√°i": "C·∫£nh b√°o" if chenh_lech_152_621 != 0 else "Kh·ªõp",
                "G·ª£i √Ω": goi_y_152_621
            })

            htk_dau_ky = get_single_value(bctc_data, 'sdn_ct140', 0)
            htk_cuoi_ky = get_single_value(bctc_data, 'scn_ct140', 0)
            goi_y_htk = "OK"
            trang_thai_htk = "OK"
            if doanh_thu_kqkd > 0 and htk_cuoi_ky > (doanh_thu_kqkd * 2):
                trang_thai_htk = "C·∫£nh b√°o"
                goi_y_htk = f"HTK cu·ªëi k·ª≥ ({htk_cuoi_ky:,.0f}) g·∫•p {(htk_cuoi_ky / doanh_thu_kqkd):.1f} l·∫ßn doanh thu. "
            if htk_cuoi_ky >= htk_dau_ky and htk_dau_ky > 0:
                if trang_thai_htk != "C·∫£nh b√°o": goi_y_htk = ""
                trang_thai_htk = "C·∫£nh b√°o"
                goi_y_htk += "HTK kh√¥ng gi·∫£m ho·∫∑c tƒÉng so v·ªõi ƒë·∫ßu k·ª≥. D·∫•u hi·ªáu t·ªìn kho ·∫£o/k√©m lu√¢n chuy·ªÉn."
            results.append({
                "N·ªôi dung": "R·ªßi ro h√†ng t·ªìn kho ·∫£o",
                "S·ªë li·ªáu A": f"{htk_dau_ky:,.0f} (HTK ƒê·∫ßu k·ª≥)",
                "S·ªë li·ªáu B": f"{htk_cuoi_ky:,.0f} (HTK Cu·ªëi k·ª≥)",
                "Ch√™nh l·ªách": f"{htk_cuoi_ky - htk_dau_ky:,.0f}",
                "Tr·∫°ng th√°i": trang_thai_htk,
                "G·ª£i √Ω": goi_y_htk
            })

            balance_checks = [
                {'tk': 'sdck_co_ct131', 'name': 'D∆∞ C√≥ TK 131',
                 'hint': 'Ki·ªÉm tra chi ti·∫øt: N·∫øu l√† ng∆∞·ªùi mua tr·∫£ tr∆∞·ªõc, ki·ªÉm tra h·ª£p ƒë·ªìng. N·∫øu h√†ng ƒë√£ ti√™u th·ª•, ph·∫£i ghi nh·∫≠n doanh thu t√≠nh thu·∫ø.'},
                {'tk': 'sdck_co_ct337', 'name': 'D∆∞ C√≥ TK 337 (H·ª£p ƒë·ªìng XD)',
                 'hint': 'Ki·ªÉm tra h·ª£p ƒë·ªìng, ti·∫øn ƒë·ªô ƒë·ªÉ ghi nh·∫≠n doanh thu theo h·∫°ng m·ª•c ho√†n th√†nh.'},
                {'tk': 'sdck_co_ct3387', 'name': 'D∆∞ C√≥ TK 3387 (DT ch∆∞a th·ª±c hi·ªán)',
                 'hint': 'Ki·ªÉm tra chi ti·∫øt: N·∫øu h√†ng ƒë√£ giao, BƒêS ƒë√£ b√†n giao, h·∫°ng m·ª•c XD ƒë√£ ho√†n th√†nh, ph·∫£i ghi nh·∫≠n doanh thu t√≠nh thu·∫ø.'},
                {'tk': 'sdck_no_ct157', 'name': 'D∆∞ N·ª£ TK 157 (H√†ng g·ª≠i b√°n)',
                 'hint': 'Ki·ªÉm tra chi ti·∫øt: N·∫øu h√†ng ƒë√£ g·ª≠i cho kh√°ch h√†ng, ph·∫£i ghi nh·∫≠n doanh thu t√≠nh thu·∫ø theo quy ƒë·ªãnh.'},
                {'tk': 'sdck_no_ct136', 'name': 'D∆∞ N·ª£ TK 136 (Ph·∫£i thu n·ªôi b·ªô)',
                 'hint': 'Ki·ªÉm tra chi ti·∫øt: N·∫øu l√† ti·ªÅn b√°n h√†ng n·ªôi b·ªô, ph·∫£i ghi nh·∫≠n doanh thu t√≠nh thu·∫ø.'},
                {'tk': 'sdck_no_ct138', 'name': 'D∆∞ N·ª£ TK 138 (Ph·∫£i thu kh√°c)',
                 'hint': 'Ki·ªÉm tra chi ti·∫øt kho·∫£n ph·∫£i thu kh√°c. N·∫øu l√† giao d·ªãch h√†ng h√≥a/d·ªãch v·ª•, ph·∫£i ghi nh·∫≠n doanh thu.'},
                {'tk': 'sdck_co_ct138', 'name': 'D∆∞ C√≥ TK 138 (Ph·∫£i tr·∫£ kh√°c)',
                 'hint': 'Ki·ªÉm tra chi ti·∫øt kho·∫£n thu th·ª´a. N·∫øu l√† giao d·ªãch h√†ng h√≥a/d·ªãch v·ª•, ph·∫£i ghi nh·∫≠n doanh thu.'},
            ]
            for check in balance_checks:
                balance = get_single_value(bctc_data, check['tk'], 0)
                results.append({
                    "N·ªôi dung": check['name'],
                    "S·ªë li·ªáu A": f"{balance:,.0f}",
                    "S·ªë li·ªáu B": "N/A", "Ch√™nh l·ªách": "N/A",
                    "Tr·∫°ng th√°i": "C·∫£nh b√°o" if balance > 0 else "OK",
                    "G·ª£i √Ω": check['hint'] if balance > 0 else "Kh√¥ng c√≥ s·ªë d∆∞ b·∫•t th∆∞·ªùng."
                })

            ps_co_155 = get_single_value(bctc_data, 'ps_co_ct155', 0)
            ps_co_156 = get_single_value(bctc_data, 'ps_co_ct156', 0)
            ps_no_632 = get_single_value(bctc_data, 'ps_no_ct632', 0)
            tong_xuat_kho = ps_co_155 + ps_co_156
            chenh_lech_gvon = tong_xuat_kho - ps_no_632
            goi_y_gvon = "OK"
            if chenh_lech_gvon != 0:
                if chenh_lech_gvon > 0:
                    goi_y_gvon = "Xu·∫•t kho > Gi√° v·ªën. D·∫•u hi·ªáu xu·∫•t ti√™u th·ª•/bi·∫øu t·∫∑ng kh√¥ng ghi nh·∫≠n gi√° v·ªën, ho·∫∑c h√†ng b√°n tr·∫£ l·∫°i kh√¥ng gi·∫£m gi√° v·ªën."
                else:
                    goi_y_gvon = "Xu·∫•t kho < Gi√° v·ªën. C√≥ th·ªÉ do d·ª± ph√≤ng gi·∫£m gi√° HTK. N·∫øu kh√¥ng, c√≥ th·ªÉ l√† h√†ng mua b√°n th·∫≥ng kh√¥ng qua kho. C·∫ßn ƒë·ªëi chi·∫øu PS C√≥ TK 511/512."
            results.append({
                "N·ªôi dung": "Xu·∫•t kho TP, HH vs. Gi√° v·ªën (TK 155, 156 vs 632)",
                "S·ªë li·ªáu A": f"{tong_xuat_kho:,.0f} (PS C√≥ 155+156)",
                "S·ªë li·ªáu B": f"{ps_no_632:,.0f} (PS N·ª£ 632)",
                "Ch√™nh l·ªách": f"{chenh_lech_gvon:,.0f}",
                "Tr·∫°ng th√°i": "C·∫£nh b√°o" if chenh_lech_gvon != 0 else "Kh·ªõp",
                "G·ª£i √Ω": goi_y_gvon
            })

            ps_no_2293 = get_single_value(bctc_data, 'ps_no_ct2293', 0)
            ps_co_2293 = get_single_value(bctc_data, 'ps_co_ct2293', 0)
            if ps_no_2293 > 0 or ps_co_2293 > 0:
                results.append({
                    "N·ªôi dung": "D·ª± ph√≤ng ph·∫£i thu kh√≥ ƒë√≤i (TK 2293/139)",
                    "S·ªë li·ªáu A": f"{ps_no_2293:,.0f} (Tr√≠ch l·∫≠p)",
                    "S·ªë li·ªáu B": f"{ps_co_2293:,.0f} (Ho√†n nh·∫≠p)",
                    "Ch√™nh l·ªách": "N/A",
                    "Tr·∫°ng th√°i": "C·∫£nh b√°o",
                    "G·ª£i √Ω": "C√≥ ph√°t sinh d·ª± ph√≤ng ph·∫£i thu kh√≥ ƒë√≤i. Y√™u c·∫ßu ki·ªÉm tra s·ª± t∆∞∆°ng ·ª©ng v·ªõi s·ª± tƒÉng/gi·∫£m c·ªßa c√°c kho·∫£n ph·∫£i thu."
                })

            balance_checks_provision = [
                {'tk': 'sdck_co_ct335', 'name': 'D∆∞ C√≥ TK 335 (Chi ph√≠ ph·∫£i tr·∫£)',
                 'hint': 'Ki·ªÉm tra chi ti·∫øt, ƒë·∫∑c bi·ªát l√† d·ª± ph√≤ng b·∫£o h√†nh c√¥ng tr√¨nh x√¢y l·∫Øp ƒë√£ h·∫øt th·ªùi h·∫°n m√† ch∆∞a ho√†n nh·∫≠p.'},
                {'tk': 'sdck_co_ct352', 'name': 'D∆∞ C√≥ TK 352 (D·ª± ph√≤ng ph·∫£i tr·∫£)',
                 'hint': 'Ki·ªÉm tra chi ti·∫øt c√°c kho·∫£n d·ª± ph√≤ng ƒë√£ tr√≠ch l·∫≠p nh∆∞ng kh√¥ng s·ª≠ d·ª•ng ho·∫∑c kh√¥ng d√πng h·∫øt m√† ch∆∞a ho√†n nh·∫≠p.'},
                {'tk': 'sdck_no_ct242', 'name': 'D∆∞ N·ª£ TK 242 (Chi ph√≠ tr·∫£ tr∆∞·ªõc)',
                 'hint': 'Ki·ªÉm tra chi ti·∫øt c√°c kho·∫£n chi ph√≠ tr·∫£ tr∆∞·ªõc ƒë·ªÉ ƒë·∫£m b·∫£o ph√¢n b·ªï ƒë√∫ng k·ª≥.'},
            ]
            for check in balance_checks_provision:
                balance = get_single_value(bctc_data, check['tk'], 0)
                if balance > 0:
                    results.append({
                        "N·ªôi dung": check['name'],
                        "S·ªë li·ªáu A": f"{balance:,.0f}", "S·ªë li·ªáu B": "N/A", "Ch√™nh l·ªách": "N/A",
                        "Tr·∫°ng th√°i": "C·∫£nh b√°o", "G·ª£i √Ω": check['hint']
                    })

            ps_no_811 = get_single_value(bctc_data, 'ps_no_ct811', 0)
            ps_co_711 = get_single_value(bctc_data, 'ps_co_ct711', 0)
            if ps_no_811 > 0:
                results.append({
                    "N·ªôi dung": "R·ªßi ro thanh l√Ω TSCƒê, b√°n ph·∫ø li·ªáu",
                    "S·ªë li·ªáu A": f"{ps_co_711:,.0f} (Thu nh·∫≠p kh√°c)",
                    "S·ªë li·ªáu B": f"{ps_no_811:,.0f} (Chi ph√≠ kh√°c)",
                    "Ch√™nh l·ªách": "N/A",
                    "Tr·∫°ng th√°i": "C·∫£nh b√°o",
                    "G·ª£i √Ω": "C√≥ ph√°t sinh Chi ph√≠ kh√°c. Y√™u c·∫ßu cung c·∫•p chi ti·∫øt TK 711 v√† 811 ƒë·ªÉ ki·ªÉm tra vi·ªác h·∫°ch to√°n thu nh·∫≠p t·ª´ thanh l√Ω TSCƒê, b√°n ph·∫ø li·ªáu."
                })

        elif accounting_standard == "Th√¥ng t∆∞ 200":
            bctc_data = bctc_decl.get('data', {})

            tien_mat = get_single_value(bctc_data, 'scn_ct110', 0)
            chi_phi_lai_vay = get_single_value(bctc_data, 'kqkd_nn_ct23', 0)
            is_risk_tien_lai_vay = tien_mat > 1000000000 and chi_phi_lai_vay > 0
            results.append({
                "N·ªôi dung": "R·ªßi ro Ti·ªÅn v√† Chi ph√≠ l√£i vay (TT200)",
                "S·ªë li·ªáu A": f"{tien_mat:,.0f} (Ti·ªÅn v√† TƒêT - M√£ 110)",
                "S·ªë li·ªáu B": f"{chi_phi_lai_vay:,.0f} (CP l√£i vay - M√£ 23)",
                "Ch√™nh l·ªách": "N/A",
                "Tr·∫°ng th√°i": "C·∫£nh b√°o" if is_risk_tien_lai_vay else "OK",
                "G·ª£i √Ω": "L∆∞·ª£ng ti·ªÅn m·∫∑t l·ªõn nh∆∞ng v·∫´n ph√°t sinh chi ph√≠ l√£i vay. C·∫ßn xem x√©t t√≠nh h·ª£p l√Ω c·ªßa c√°c kho·∫£n vay."
            })

            phai_thu_noi_bo = get_single_value(bctc_data, 'scn_ct133', 0)
            if phai_thu_noi_bo > 0:
                results.append({
                    "N·ªôi dung": "R·ªßi ro Ph·∫£i thu n·ªôi b·ªô ng·∫Øn h·∫°n (TT200)",
                    "S·ªë li·ªáu A": f"{phai_thu_noi_bo:,.0f} (M√£ 133)",
                    "S·ªë li·ªáu B": "N/A", "Ch√™nh l·ªách": "N/A",
                    "Tr·∫°ng th√°i": "C·∫£nh b√°o",
                    "G·ª£i √Ω": "C√≥ ph√°t sinh Ph·∫£i thu n·ªôi b·ªô. C·∫ßn ki·ªÉm tra chi ti·∫øt c√°c giao d·ªãch trong t·∫≠p ƒëo√†n/c√¥ng ty m·∫π-con ƒë·ªÉ tr√°nh b·ªè s√≥t doanh thu."
                })

            phai_thu_khac = get_single_value(bctc_data, 'scn_ct136', 0)
            if phai_thu_khac > 0:
                results.append({
                    "N·ªôi dung": "R·ªßi ro Ph·∫£i thu ng·∫Øn h·∫°n kh√°c (TT200)",
                    "S·ªë li·ªáu A": f"{phai_thu_khac:,.0f} (M√£ 136)",
                    "S·ªë li·ªáu B": "N/A", "Ch√™nh l·ªách": "N/A",
                    "Tr·∫°ng th√°i": "C·∫£nh b√°o",
                    "G·ª£i √Ω": "C√≥ ph√°t sinh Ph·∫£i thu ng·∫Øn h·∫°n kh√°c. C·∫ßn ki·ªÉm tra chi ti·∫øt ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≥ doanh thu b·ªã ghi nh·∫≠n sai v√†o kho·∫£n m·ª•c n√†y."
                })

            provision_checks = [
                {'code': 'ct137', 'name': 'D·ª± ph√≤ng ph·∫£i thu ng·∫Øn h·∫°n kh√≥ ƒë√≤i (*)'},
                {'code': 'ct149', 'name': 'D·ª± ph√≤ng gi·∫£m gi√° h√†ng t·ªìn kho (*)'},
                {'code': 'ct219', 'name': 'D·ª± ph√≤ng ph·∫£i thu d√†i h·∫°n kh√≥ ƒë√≤i (*)'},
                {'code': 'ct321', 'name': 'Qu·ªπ khen th∆∞·ªüng, ph√∫c l·ª£i (*)'},
            ]
            for check in provision_checks:
                balance_sdn = get_single_value(bctc_data, f"sdn_{check['code']}", 0)
                balance_scn = get_single_value(bctc_data, f"scn_{check['code']}", 0)
                if balance_sdn > 0 or balance_scn > 0:
                    results.append({
                        "N·ªôi dung": f"Ki·ªÉm tra kho·∫£n m·ª•c D·ª± ph√≤ng (TT200) - {check['name']}",
                        "S·ªë li·ªáu A": f"{balance_sdn:,.0f} (ƒê·∫ßu nƒÉm)",
                        "S·ªë li·ªáu B": f"{balance_scn:,.0f} (Cu·ªëi nƒÉm)",
                        "Ch√™nh l·ªách": "N/A",
                        "Tr·∫°ng th√°i": "C·∫£nh b√°o",
                        "G·ª£i √Ω": "C√≥ ph√°t sinh s·ªë d∆∞ c√°c kho·∫£n d·ª± ph√≤ng. Y√™u c·∫ßu DN gi·∫£i tr√¨nh v·ªÅ vi·ªác tr√≠ch l·∫≠p c√≥ ƒë√∫ng quy ƒë·ªãnh, h·ªì s∆° k√®m theo,..."
                    })

            vat_decls_in_year = [d for d in declarations if '01/GTGT' in d['loai_tk']]
            if vat_decls_in_year:
                last_vat_decl = max(vat_decls_in_year, key=lambda x: x['ky'])
                vat_ct43 = get_single_value(last_vat_decl['data'], 'ct43', 0)
                bctc_ct152 = get_single_value(bctc_data, 'scn_ct152', 0)
                chenh_lech_vat = bctc_ct152 - vat_ct43
                results.append({
                    "N·ªôi dung": "ƒê·ªëi chi·∫øu Thu·∫ø GTGT ƒë∆∞·ª£c kh·∫•u tr·ª´ (TT200)",
                    "S·ªë li·ªáu A": f"{bctc_ct152:,.0f} (BCTC - M√£ 152)",
                    "S·ªë li·ªáu B": f"{vat_ct43:,.0f} (TK GTGT cu·ªëi k·ª≥ - Ch·ªâ ti√™u 43)",
                    "Ch√™nh l·ªách": f"{chenh_lech_vat:,.0f}",
                    "Tr·∫°ng th√°i": "C·∫£nh b√°o" if chenh_lech_vat != 0 else "Kh·ªõp",
                    "G·ª£i √Ω": "S·ªë d∆∞ Thu·∫ø GTGT ƒë∆∞·ª£c kh·∫•u tr·ª´ tr√™n BCTC kh√¥ng kh·ªõp v·ªõi s·ªë thu·∫ø c√≤n ƒë∆∞·ª£c kh·∫•u tr·ª´ chuy·ªÉn k·ª≥ sau tr√™n t·ªù khai GTGT cu·ªëi c√πng c·ªßa nƒÉm. Y√™u c·∫ßu DN gi·∫£i tr√¨nh."
                })
            else:
                results.append({
                    "N·ªôi dung": "ƒê·ªëi chi·∫øu Thu·∫ø GTGT ƒë∆∞·ª£c kh·∫•u tr·ª´ (TT200)",
                    "S·ªë li·ªáu A": "N/A", "S·ªë li·ªáu B": "N/A", "Ch√™nh l·ªách": "N/A",
                    "Tr·∫°ng th√°i": "Kh√¥ng ƒë·ªß d·ªØ li·ªáu",
                    "G·ª£i √Ω": "C·∫ßn t·∫£i l√™n t·ªù khai GTGT c·ªßa k·ª≥ cu·ªëi c√πng trong nƒÉm ƒë·ªÉ th·ª±c hi·ªán ƒë·ªëi chi·∫øu."
                })

            dau_tu_cty_con = get_single_value(bctc_data, 'scn_ct251', 0)
            dau_tu_lkld = get_single_value(bctc_data, 'scn_ct252', 0)
            if dau_tu_cty_con > 0 or dau_tu_lkld > 0:
                results.append({
                    "N·ªôi dung": "Ki·ªÉm tra Giao d·ªãch li√™n k·∫øt (TT200)",
                    "S·ªë li·ªáu A": f"{dau_tu_cty_con:,.0f} (ƒê·∫ßu t∆∞ v√†o cty con)",
                    "S·ªë li·ªáu B": f"{dau_tu_lkld:,.0f} (ƒê·∫ßu t∆∞ v√†o LKLƒê)",
                    "Ch√™nh l·ªách": "N/A",
                    "Tr·∫°ng th√°i": "C·∫£nh b√°o",
                    "G·ª£i √Ω": "C√≥ ph√°t sinh c√°c kho·∫£n ƒë·∫ßu t∆∞ v√†o c√¥ng ty con/li√™n k·∫øt, li√™n doanh. C·∫ßn ki·ªÉm tra xem doanh nghi·ªáp c√≥ k√™ khai Ph·ª• l·ª•c giao d·ªãch li√™n k·∫øt k√®m theo T·ªù khai quy·∫øt to√°n thu·∫ø TNDN hay kh√¥ng."
                })

            prepayment_short = get_single_value(bctc_data, 'scn_ct312', 0)
            prepayment_long = get_single_value(bctc_data, 'scn_ct332', 0)
            if prepayment_short > 0 or prepayment_long > 0:
                results.append({
                    "N·ªôi dung": "R·ªßi ro Ng∆∞·ªùi mua tr·∫£ ti·ªÅn tr∆∞·ªõc (TT200)",
                    "S·ªë li·ªáu A": f"{prepayment_short:,.0f} (Ng·∫Øn h·∫°n - M√£ 312)",
                    "S·ªë li·ªáu B": f"{prepayment_long:,.0f} (D√†i h·∫°n - M√£ 332)",
                    "Ch√™nh l·ªách": "N/A",
                    "Tr·∫°ng th√°i": "C·∫£nh b√°o",
                    "G·ª£i √Ω": "C√≥ ph√°t sinh kho·∫£n ng∆∞·ªùi mua tr·∫£ ti·ªÅn tr∆∞·ªõc. Y√™u c·∫ßu DN gi·∫£i tr√¨nh chi ti·∫øt, c√≥ nguy c∆° b·ªè s√≥t doanh thu."
                })

            payable_employees = get_single_value(bctc_data, 'scn_ct314', 0)
            if payable_employees > 0:
                results.append({
                    "N·ªôi dung": "R·ªßi ro Ph·∫£i tr·∫£ ng∆∞·ªùi lao ƒë·ªông (TT200)",
                    "S·ªë li·ªáu A": f"{payable_employees:,.0f} (M√£ 314)",
                    "S·ªë li·ªáu B": "N/A",
                    "Ch√™nh l·ªách": "N/A",
                    "Tr·∫°ng th√°i": "C·∫£nh b√°o",
                    "G·ª£i √Ω": "Y√™u c·∫ßu DN gi·∫£i tr√¨nh ƒë·∫øn 31/3 nƒÉm sau ƒë√£ chi h·∫øt ch∆∞a, cung c·∫•p ch·ª©ng t·ª´. N·∫øu chi kh√¥ng h·∫øt, c√≥ th·ªÉ b·ªã xu·∫•t to√°n chi ph√≠."
                })

            unearned_revenue_short = get_single_value(bctc_data, 'scn_ct318', 0)
            unearned_revenue_long = get_single_value(bctc_data, 'scn_ct336', 0)
            if unearned_revenue_short > 0 or unearned_revenue_long > 0:
                results.append({
                    "N·ªôi dung": "R·ªßi ro Doanh thu ch∆∞a th·ª±c hi·ªán (TT200)",
                    "S·ªë li·ªáu A": f"{unearned_revenue_short:,.0f} (Ng·∫Øn h·∫°n - M√£ 318)",
                    "S·ªë li·ªáu B": f"{unearned_revenue_long:,.0f} (D√†i h·∫°n - M√£ 336)",
                    "Ch√™nh l·ªách": "N/A",
                    "Tr·∫°ng th√°i": "C·∫£nh b√°o",
                    "G·ª£i √Ω": "C√≥ ph√°t sinh doanh thu ch∆∞a th·ª±c hi·ªán. Y√™u c·∫ßu DN cung c·∫•p chi ti·∫øt ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√£ ghi nh·∫≠n ƒë·∫ßy ƒë·ªß doanh thu."
                })

            cplv_kqkd = get_single_value(bctc_data, 'kqkd_nn_ct23', 0)
            tien_chi_tra_lai_vay = abs(get_single_value(bctc_data, 'lctt_nn_ct04', 0))

            trang_thai_lctt = "Kh√¥ng ƒë·ªß d·ªØ li·ªáu"
            chenh_lech_lctt = "N/A"
            if tien_chi_tra_lai_vay > 0:
                chenh_lech_num = cplv_kqkd - tien_chi_tra_lai_vay
                chenh_lech_lctt = f"{chenh_lech_num:,.0f}"
                trang_thai_lctt = "C·∫£nh b√°o" if chenh_lech_num != 0 else "Kh·ªõp"

            results.append({
                "N·ªôi dung": "ƒê·ªëi chi·∫øu Chi ph√≠ l√£i vay (TT200)",
                "S·ªë li·ªáu A": f"{cplv_kqkd:,.0f} (CP l√£i vay tr√™n KQKD)",
                "S·ªë li·ªáu B": f"{tien_chi_tra_lai_vay:,.0f} (Ti·ªÅn tr·∫£ l√£i vay tr√™n LCTT)" if tien_chi_tra_lai_vay > 0 else "Ch∆∞a c√≥ d·ªØ li·ªáu",
                "Ch√™nh l·ªách": chenh_lech_lctt,
                "Tr·∫°ng th√°i": trang_thai_lctt,
                "G·ª£i √Ω": "ƒê·ªëi chi·∫øu chi ph√≠ l√£i vay tr√™n KQKD v√† LCTT. C·∫ßn t·∫£i file XML c√≥ ch·ª©a d·ªØ li·ªáu LCTT ƒë·ªÉ ph√¢n t√≠ch."
            })

            items_to_check = {
                "Doanh thu b√°n h√†ng": ('kqkd_nn_ct01', 'kqkd_nt_ct01'),
                "Gi√° v·ªën h√†ng b√°n": ('kqkd_nn_ct11', 'kqkd_nt_ct11'),
                "Chi ph√≠ b√°n h√†ng": ('kqkd_nn_ct25', 'kqkd_nt_ct25'),
                "Chi ph√≠ QLDN": ('kqkd_nn_ct26', 'kqkd_nt_ct26'),
                "Thu nh·∫≠p kh√°c": ('kqkd_nn_ct31', 'kqkd_nt_ct31'),
            }
            for name, (current_key, prior_key) in items_to_check.items():
                current_val = get_single_value(bctc_data, current_key, 0)
                prior_val = get_single_value(bctc_data, prior_key, 0)

                if prior_val != 0:
                    change_pct = ((current_val - prior_val) / prior_val) * 100
                    if abs(change_pct) > 30:
                        results.append({
                            "N·ªôi dung": f"Bi·∫øn ƒë·ªông b·∫•t th∆∞·ªùng - {name}",
                            "S·ªë li·ªáu A": f"{prior_val:,.0f} (NƒÉm tr∆∞·ªõc)",
                            "S·ªë li·ªáu B": f"{current_val:,.0f} (NƒÉm nay)",
                            "Ch√™nh l·ªách": f"{change_pct:,.2f}%",
                            "Tr·∫°ng th√°i": "C·∫£nh b√°o",
                            "G·ª£i √Ω": "Y√™u c·∫ßu Doanh nghi·ªáp gi·∫£i tr√¨nh v·ªÅ bi·∫øn ƒë·ªông tƒÉng/gi·∫£m ƒë·ªôt bi·∫øn (>30%) so v·ªõi c√πng k·ª≥."
                        })

    else:
        results.append({"N·ªôi dung": "Ph√¢n t√≠ch BCTC", "S·ªë li·ªáu A": "N/A", "S·ªë li·ªáu B": "N/A", "Ch√™nh l·ªách": "N/A",
                        "Tr·∫°ng th√°i": "Kh√¥ng ƒë·ªß d·ªØ li·ªáu", "G·ª£i √Ω": "C·∫ßn t·∫£i l√™n file B√°o c√°o t√†i ch√≠nh."})

    return results


async def get_gemini_analysis(api_key, dfs_dict, risks_df, notes_content=None):
    prompt = "B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch thu·∫ø. D·ª±a tr√™n c√°c s·ªë li·ªáu t·ªïng h·ª£p t·ª´ h·ªì s∆° khai thu·∫ø v√† c√°c t√†i li·ªáu d∆∞·ªõi ƒë√¢y, h√£y ƒë∆∞a ra m·ªôt nh·∫≠n x√©t ng·∫Øn g·ªçn (kho·∫£ng 3-4 g·∫°ch ƒë·∫ßu d√≤ng) v·ªÅ t√¨nh h√¨nh t√†i ch√≠nh v√† c√°c r·ªßi ro thu·∫ø ti·ªÅm ·∫©n n·ªïi b·∫≠t c·ªßa doanh nghi·ªáp.\n\n"
    for name, df in dfs_dict.items():
        if not df.empty:
            prompt += f"--- {name} ---\n"
            prompt += df.to_string(index=False)
            prompt += "\n\n"
    if not risks_df.empty:
        prompt += "--- C√ÅC R·ª¶I RO ƒê√É PH√ÅT HI·ªÜN ---\n"
        prompt += risks_df.to_string(index=False)
        prompt += "\n\n"
    if notes_content:
        prompt += "--- N·ªòI DUNG THUY·∫æT MINH BCTC ---\n"
        prompt += notes_content[:4000]
        prompt += "\n"

    api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={api_key}"
    payload = {"contents": [{"parts": [{"text": prompt}]}]}
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(api_url, json=payload, timeout=60)
            response.raise_for_status()
            result = response.json()
            st.session_state['gemini_commentary'] = result['candidates'][0]['content']['parts'][0]['text']
    except Exception as e:
        st.session_state['gemini_commentary'] = f"**L·ªói khi g·ªçi Gemini API:**\n\n{str(e)}"


# --- B√ÅO C√ÅO (REPORTING) ---
def display_results():
    st.markdown("---")
    st.header("K·∫øt qu·∫£ Ph√¢n t√≠ch & R√† so√°t")

    tab_titles = ["T·ªïng h·ª£p & ƒê·ªëi chi·∫øu"]
    if 'notes_content' in st.session_state and st.session_state['notes_content']:
        tab_titles.append("Thuy·∫øt minh BCTC")

    if st.session_state.get('output_invoice_data') or st.session_state.get('input_invoice_data'):
        tab_titles.append("B·∫£ng k√™ H√≥a ƒë∆°n")

    if not st.session_state.get('gtgt_detailed_df', pd.DataFrame()).empty:
        tab_titles.append("Chi ti·∫øt 01/GTGT")
    if not st.session_state.get('tndn_main_df', pd.DataFrame()).empty:
        tab_titles.append("Chi ti·∫øt 03/TNDN")

    tabs = st.tabs(tab_titles)

    with tabs[0]:
        display_summary_and_risks()

    tab_index = 1
    if 'notes_content' in st.session_state and st.session_state['notes_content']:
        with tabs[tab_index]:
            st.subheader("üìù N·ªôi dung Thuy·∫øt minh B√°o c√°o t√†i ch√≠nh")
            st.text_area("N·ªôi dung tr√≠ch xu·∫•t t·ª´ file:", st.session_state['notes_content'], height=400)
        tab_index += 1

    if st.session_state.get('output_invoice_data') or st.session_state.get('input_invoice_data'):
        with tabs[tab_index]:
            display_invoice_details()
        tab_index += 1

    if not st.session_state.get('gtgt_detailed_df', pd.DataFrame()).empty:
        with tabs[tab_index]:
            st.subheader("üìÑ B·∫£ng chi ti·∫øt T·ªù khai 01/GTGT")
            st.dataframe(st.session_state['gtgt_detailed_df'])
        tab_index += 1

    if not st.session_state.get('tndn_main_df', pd.DataFrame()).empty:
        with tabs[tab_index]:
            st.subheader("üìÑ B·∫£ng chi ti·∫øt T·ªù khai ch√≠nh 03/TNDN")
            st.dataframe(st.session_state['tndn_main_df'])
            st.subheader("üìÑ B·∫£ng chi ti·∫øt Ph·ª• l·ª•c 03-1A/TNDN")
            st.dataframe(st.session_state['tndn_appendix_df'])
        tab_index += 1


def display_summary_and_risks():
    gtgt_summary_df = st.session_state.get('gtgt_summary_df', pd.DataFrame())
    balance_sheet_df = st.session_state.get('balance_sheet_df', pd.DataFrame())
    income_statement_df = st.session_state.get('income_statement_df', pd.DataFrame())
    tndn_summary_df = st.session_state.get('tndn_summary_df', pd.DataFrame())
    tncn_kk_summary_df = st.session_state.get('tncn_kk_summary_df', pd.DataFrame())
    tncn_qtt_summary_df = st.session_state.get('tncn_qtt_summary_df', pd.DataFrame())
    output_invoice_data = st.session_state.get('output_invoice_data', None)
    input_invoice_data = st.session_state.get('input_invoice_data', None)
    all_checks = st.session_state.get('all_checks', [])
    api_key = st.session_state.get('gemini_api_key', '')
    notes_content = st.session_state.get('notes_content', None)

    vietnamese_formatter = lambda x: "{:,.2f}".format(x).replace(",", "X").replace(".", ",").replace("X", ".")

    if not gtgt_summary_df.empty:
        st.subheader("üìä B·∫£ng t·ªïng h·ª£p T·ªù khai GTGT")
        st.dataframe(
            gtgt_summary_df.style.format(formatter=vietnamese_formatter,
                                         subset=pd.IndexSlice[:, gtgt_summary_df.columns[1:]]))

    if not tndn_summary_df.empty:
        st.subheader("üìä B·∫£ng t·ªïng h·ª£p Quy·∫øt to√°n TNDN")
        st.dataframe(tndn_summary_df.style.format({'S·ªë ti·ªÅn (VND)': vietnamese_formatter}))

    if not balance_sheet_df.empty:
        st.subheader("üìä B√°o c√°o T√¨nh h√¨nh t√†i ch√≠nh (B·∫£ng C√¢n ƒë·ªëi K·∫ø to√°n)")
        st.dataframe(
            balance_sheet_df.style.format({'S·ªë cu·ªëi nƒÉm': vietnamese_formatter, 'S·ªë ƒë·∫ßu nƒÉm': vietnamese_formatter}))

    if not income_statement_df.empty:
        st.subheader("üìä B√°o c√°o K·∫øt qu·∫£ Ho·∫°t ƒë·ªông Kinh doanh")
        st.dataframe(
            income_statement_df.style.format({'NƒÉm nay': vietnamese_formatter, 'NƒÉm tr∆∞·ªõc': vietnamese_formatter}))

    if not tncn_kk_summary_df.empty:
        st.subheader("üìä B·∫£ng t·ªïng h·ª£p T·ªù khai Kh·∫•u tr·ª´ TNCN (05/KK)")
        st.dataframe(tncn_kk_summary_df.style.format(formatter=vietnamese_formatter,
                                                     subset=pd.IndexSlice[:, tncn_kk_summary_df.columns[1:]]))

    if not tncn_qtt_summary_df.empty:
        st.subheader("üìä B·∫£ng t·ªïng h·ª£p Quy·∫øt to√°n TNCN (05/QTT)")
        st.dataframe(tncn_qtt_summary_df.style.format({'S·ªë li·ªáu': vietnamese_formatter}))

    if output_invoice_data:
        st.subheader("üìä B·∫£ng t·ªïng h·ª£p t·ª´ H√≥a ƒë∆°n B√°n ra")
        summary_invoice_df = pd.DataFrame.from_dict(output_invoice_data['valid_summary'], orient='index',
                                                    columns=['S·ªë ti·ªÅn (VND)'])
        summary_invoice_df.index = ['T·ªïng ti·ªÅn ch∆∞a thu·∫ø', 'T·ªïng ti·ªÅn thu·∫ø', 'T·ªïng ti·ªÅn chi·∫øt kh·∫•u',
                                    'T·ªïng ti·ªÅn thanh to√°n']
        st.dataframe(summary_invoice_df.style.format(vietnamese_formatter))

        if 'mismatch_df' in output_invoice_data and not output_invoice_data['mismatch_df'].empty:
            st.subheader("‚ö†Ô∏è C·∫£nh b√°o: Sai l·ªách Th√†nh ti·ªÅn tr√™n B·∫£ng k√™ chi ti·∫øt")
            st.warning(
                "C√°c d√≤ng d∆∞·ªõi ƒë√¢y c√≥ (Th√†nh ti·ªÅn) kh√°c v·ªõi (S·ªë l∆∞·ª£ng * ƒê∆°n gi√°). Vui l√≤ng ki·ªÉm tra l·∫°i file g·ªëc.")
            st.dataframe(output_invoice_data['mismatch_df'].style.format(formatter=vietnamese_formatter))

    if input_invoice_data:
        st.subheader("üìä B·∫£ng t·ªïng h·ª£p t·ª´ H√≥a ƒë∆°n Mua v√†o")
        summary_invoice_df = pd.DataFrame.from_dict(input_invoice_data['valid_summary'], orient='index',
                                                    columns=['S·ªë ti·ªÅn (VND)'])
        summary_invoice_df.index = ['T·ªïng ti·ªÅn ch∆∞a thu·∫ø', 'T·ªïng ti·ªÅn thu·∫ø', 'T·ªïng ti·ªÅn chi·∫øt kh·∫•u',
                                    'T·ªïng ti·ªÅn thanh to√°n']
        st.dataframe(summary_invoice_df.style.format(vietnamese_formatter))

    st.subheader("üö® B·∫£ng ƒê·ªëi chi·∫øu & R√† so√°t R·ªßi ro")
    df_checks = pd.DataFrame(all_checks)

    def highlight_status(row):
        color = ''
        if row['Tr·∫°ng th√°i'] == 'C·∫£nh b√°o':
            color = 'background-color: #FFDDDD'
        elif row['Tr·∫°ng th√°i'] in ['Kh·ªõp', 'OK']:
            color = 'background-color: #D4EDDA'
        elif row['Tr·∫°ng th√°i'] == 'Kh√¥ng ƒë·ªß d·ªØ li·ªáu':
            color = 'background-color: #F0F0F0'
        return [color] * len(row)

    if not df_checks.empty:
        st.dataframe(df_checks.style.apply(highlight_status, axis=1), use_container_width=True)
    else:
        st.info("Ch∆∞a th·ª±c hi·ªán ƒë·ªëi chi·∫øu n√†o.")

    col1, col2 = st.columns(2)
    with col1:
        dfs_to_export = {
            "TongHop_GTGT": st.session_state.get('gtgt_summary_df', pd.DataFrame()),
            "ChiTiet_01_GTGT": st.session_state.get('gtgt_detailed_df', pd.DataFrame()),
            "TongHop_TNDN": st.session_state.get('tndn_summary_df', pd.DataFrame()),
            "ChiTiet_03_TNDN": st.session_state.get('tndn_main_df', pd.DataFrame()),
            "ChiTiet_PL_03_1A": st.session_state.get('tndn_appendix_df', pd.DataFrame()),
            "BCTHTC_CDKT": st.session_state.get('balance_sheet_df', pd.DataFrame()),
            "BCKQKD": st.session_state.get('income_statement_df', pd.DataFrame()),
            "PL_CDTK": st.session_state.get('trial_balance_df', pd.DataFrame()),
            "TongHop_TNCN_KK": st.session_state.get('tncn_kk_summary_df', pd.DataFrame()),
            "TongHop_TNCN_QTT": st.session_state.get('tncn_qtt_summary_df', pd.DataFrame()),
            "ChiTiet_TNCN_QTT": st.session_state.get('tncn_details_df', pd.DataFrame()),
            "KetQuaDoiChieu": pd.DataFrame(st.session_state.get('all_checks', []))
        }

        if output_invoice_data:
            summary_invoice_df = pd.DataFrame.from_dict(output_invoice_data['valid_summary'], orient='index',
                                                        columns=['S·ªë ti·ªÅn (VND)'])
            summary_invoice_df.index = ['T·ªïng ti·ªÅn ch∆∞a thu·∫ø', 'T·ªïng ti·ªÅn thu·∫ø', 'T·ªïng ti·ªÅn chi·∫øt kh·∫•u',
                                        'T·ªïng ti·ªÅn thanh to√°n']
            dfs_to_export["TongHop_HD_DauRa"] = summary_invoice_df
            if 'full_df' in output_invoice_data:
                dfs_to_export["BK_HD_DauRa"] = output_invoice_data['full_df']
            if 'mismatch_df' in output_invoice_data:
                dfs_to_export["HD_DauRa_SaiLech"] = output_invoice_data['mismatch_df']

        if input_invoice_data:
            if 'full_df' in input_invoice_data:
                dfs_to_export["BK_HD_DauVao"] = input_invoice_data['full_df']

        excel_data = convert_df_to_excel(dfs_to_export)
        st.download_button(label="üì• K·∫øt xu·∫•t ra Excel", data=excel_data, file_name="Bao_cao_chi_tiet.xlsx",
                           mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

    with col2:
        risks_to_report = [r for r in all_checks if r['Tr·∫°ng th√°i'] == 'C·∫£nh b√°o']
        if st.button("üìù T·∫°o Th√¥ng b√°o Gi·∫£i tr√¨nh (01/KTTT)"):
            if not risks_to_report:
                st.warning("Kh√¥ng c√≥ r·ªßi ro n√†o (Tr·∫°ng th√°i 'C·∫£nh b√°o') ƒë·ªÉ t·∫°o th√¥ng b√°o.")
            else:
                doc_buffer = create_word_notice(risks_to_report[0])
                st.download_button(label="üì• T·∫£i Th√¥ng b√°o (Word)", data=doc_buffer,
                                   file_name="Thong_bao_giai_trinh.docx",
                                   mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document")

    st.markdown("---")
    st.header("‚ú® Nh·∫≠n x√©t c·ªßa Gemini AI")
    if st.button("Ph√¢n t√≠ch v·ªõi Gemini"):
        if not api_key:
            st.error("Vui l√≤ng nh·∫≠p Gemini API Key ·ªü thanh b√™n tr√°i ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y.")
        else:
            with st.spinner("Gemini ƒëang ph√¢n t√≠ch d·ªØ li·ªáu..."):
                asyncio.run(get_gemini_analysis(api_key, dfs_to_export, pd.DataFrame(risks_to_report), notes_content))
    if 'gemini_commentary' in st.session_state:
        st.markdown(st.session_state['gemini_commentary'])


def display_invoice_details():
    output_invoice_data = st.session_state.get('output_invoice_data', {})
    input_invoice_data = st.session_state.get('input_invoice_data', {})

    vietnamese_formatter = lambda x: "{:,.2f}".format(x).replace(",", "X").replace(".", ",").replace("X", ".")

    def style_invoice_status(row):
        if 'TrangThaiHoaDon' not in row.index:
            return [''] * len(row)

        status = row['TrangThaiHoaDon']
        color = ''
        if status in ['H√≥a ƒë∆°n ƒë√£ b·ªã thay th·∫ø', 'H√≥a ƒë∆°n ƒë√£ b·ªã x√≥a b·ªè/h·ªßy b·ªè']:
            color = 'background-color: #FFC7CE'  # ƒê·ªè nh·∫°t
        elif status in ['H√≥a ƒë∆°n thay th·∫ø', 'H√≥a ƒë∆°n ƒëi·ªÅu ch·ªânh']:
            color = 'background-color: #C6EFCE'  # Xanh nh·∫°t
        elif status == 'H√≥a ƒë∆°n ƒë√£ b·ªã ƒëi·ªÅu ch·ªânh':
            color = 'background-color: #FFEB9C'  # V√†ng nh·∫°t

        return [color] * len(row)

    if 'full_df' in output_invoice_data and not output_invoice_data['full_df'].empty:
        st.subheader("üìã B·∫£ng k√™ h√≥a ƒë∆°n B√°n ra")
        df_to_display = output_invoice_data['full_df']
        styled_df = df_to_display.style.apply(style_invoice_status, axis=1)
        numeric_cols = [col for col in df_to_display.columns if pd.api.types.is_numeric_dtype(df_to_display[col])]
        styled_df = styled_df.format(formatter=vietnamese_formatter, subset=numeric_cols)
        st.dataframe(styled_df)

    if 'full_df' in input_invoice_data and not input_invoice_data['full_df'].empty:
        st.subheader("üìã B·∫£ng k√™ h√≥a ƒë∆°n Mua v√†o")
        df_to_display = input_invoice_data['full_df']
        styled_df = df_to_display.style.apply(style_invoice_status, axis=1)
        numeric_cols = [col for col in df_to_display.columns if pd.api.types.is_numeric_dtype(df_to_display[col])]
        styled_df = styled_df.format(formatter=vietnamese_formatter, subset=numeric_cols)
        st.dataframe(styled_df)


def convert_df_to_excel(dfs_dict):
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        workbook = writer.book
        number_format = workbook.add_format({'num_format': '#,##0'})

        sheet_written = False  # C·ªù ƒë·ªÉ theo d√µi xem c√≥ sheet n√†o ƒë∆∞·ª£c ghi ch∆∞a

        for sheet_name, df in dfs_dict.items():
            # Th√™m ƒëi·ªÅu ki·ªán ki·ªÉm tra df kh√¥ng ph·∫£i l√† None
            if df is not None and not df.empty:
                df.to_excel(writer, index=False, sheet_name=sheet_name)
                worksheet = writer.sheets[sheet_name]
                sheet_written = True  # ƒê·∫∑t c·ªù th√†nh True khi ghi th√†nh c√¥ng

                # --- Logic ƒë·ªãnh d·∫°ng c·ªôt ---
                for idx, col in enumerate(df.columns):
                    series = df[col]
                    # T√≠nh to√°n ƒë·ªô r·ªông c·ªôt m·ªôt c√°ch an to√†n
                    if not series.empty:
                        max_len = max(
                            series.astype(str).map(len).max(),
                            len(str(series.name))
                        ) + 2
                    else:
                        max_len = len(str(series.name)) + 2

                    worksheet.set_column(idx, idx, max_len)

                    if pd.api.types.is_numeric_dtype(series.dtype) and \
                            "M√£" not in col and "S·ªë hi·ªáu" not in col and "MST" not in col:
                        worksheet.set_column(idx, idx, max_len, number_format)

        # Sau khi duy·ªát qua t·∫•t c·∫£, n·∫øu kh√¥ng c√≥ sheet n√†o ƒë∆∞·ª£c ghi, h√£y t·∫°o m·ªôt sheet m·∫∑c ƒë·ªãnh
        if not sheet_written:
            pd.DataFrame({"Th√¥ng b√°o": ["Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ k·∫øt xu·∫•t."]}) \
                .to_excel(writer, index=False, sheet_name="Luu_y")

    return output.getvalue()


def create_word_notice(risk_data):
    doc = Document()
    now = datetime.now()
    date_str = f"Qu·∫£ng Ng√£i, ng√†y {now.day} th√°ng {now.month} nƒÉm {now.year}"
    p = doc.add_paragraph();
    p.add_run('C·ª§C THU·∫æ T·ªàNH QU·∫¢NG NG√ÉI').bold = True;
    p.alignment = 1
    p = doc.add_paragraph();
    p.add_run(date_str).italic = True;
    p.alignment = 2
    doc.add_heading('TH√îNG B√ÅO', 0)
    doc.add_heading('V·ªÅ vi·ªác gi·∫£i tr√¨nh, b·ªï sung th√¥ng tin, t√†i li·ªáu', level=1)
    doc.add_paragraph(f"K√≠nh g·ª≠i: [T√™n Ng∆∞·ªùi n·ªôp thu·∫ø]")
    doc.add_paragraph(f"M√£ s·ªë thu·∫ø: [M√£ s·ªë thu·∫ø]")
    doc.add_paragraph(
        "CƒÉn c·ª© h·ªì s∆° khai thu·∫ø do ng∆∞·ªùi n·ªôp thu·∫ø n·ªôp t·∫°i c∆° quan Thu·∫ø, C·ª•c Thu·∫ø t·ªânh Qu·∫£ng Ng√£i ƒë·ªÅ ngh·ªã Qu√Ω ƒë∆°n v·ªã gi·∫£i tr√¨nh, cung c·∫•p th√¥ng tin, t√†i li·ªáu sau ƒë√¢y:")
    p = doc.add_paragraph();
    p.add_run('N·ªôi dung c·∫ßn gi·∫£i tr√¨nh: ').bold = True;
    p.add_run(f"{risk_data['N·ªôi dung']} t·∫°i k·ª≥ t√≠nh thu·∫ø {risk_data.get('ky_tinh_thue', 'C·∫£ nƒÉm')}.")
    p = doc.add_paragraph();
    p.add_run('Chi ti·∫øt: ').bold = True;
    p.add_run(
        f"ƒê·ªëi chi·∫øu {risk_data['N·ªôi dung']}. S·ªë li·ªáu A: {risk_data['S·ªë li·ªáu A']} vs S·ªë li·ªáu B: {risk_data['S·ªë li·ªáu B']}. Ch√™nh l·ªách: {risk_data.get('Ch√™nh l·ªách', 'N/A')}. {risk_data.get('G·ª£i √Ω', '')}")
    doc.add_paragraph(
        "VƒÉn b·∫£n gi·∫£i tr√¨nh, cung c·∫•p th√¥ng tin, h·ªì s∆° t√†i li·ªáu g·ª≠i v·ªÅ C·ª•c Thu·∫ø trong th·ªùi h·∫°n 10 ng√†y l√†m vi·ªác.")
    buffer = io.BytesIO();
    doc.save(buffer);
    buffer.seek(0)
    return buffer


def main():
    params = setup_ui()

    if params["start_button"]:
        for key in list(st.session_state.keys()):
            if key not in ['analysis_complete']:
                del st.session_state[key]

        progress_bar = st.sidebar.progress(0)
        status_text = st.sidebar.empty()
        files_to_analyze = []

        if params["mode"] == "T·ª± ƒë·ªông h√≥a":
            pass
        else:
            if params.get("uploaded_files"):
                temp_dir = os.path.join(os.getcwd(), "manual_uploads")
                if not os.path.exists(temp_dir): os.makedirs(temp_dir)
                for uploaded_file in params["uploaded_files"]:
                    file_path = os.path.join(temp_dir, uploaded_file.name)
                    with open(file_path, "wb") as f: f.write(uploaded_file.getbuffer())
                    files_to_analyze.append(file_path)
        progress_bar.progress(50)

        status_text.text("B∆∞·ªõc 2/5: X·ª≠ l√Ω b·∫£ng k√™ h√≥a ƒë∆°n...")
        output_invoice_data = None
        if params.get("output_invoice_file"):
            if params["output_invoice_type"] == "Chi ti·∫øt":
                output_invoice_data = process_detailed_invoice_data(params["output_invoice_file"])
            else:
                output_invoice_data = process_summary_invoice_data(params["output_invoice_file"])

        input_invoice_data = None
        if params.get("input_invoice_files"):
            input_invoice_data = process_input_invoice_data(params["input_invoice_files"])

        progress_bar.progress(60)

        status_text.text("B∆∞·ªõc 3/5: X·ª≠ l√Ω Thuy·∫øt minh BCTC...")
        notes_content = process_financial_notes(params.get("financial_notes_file"))
        progress_bar.progress(70)

        status_text.text("B∆∞·ªõc 4/5: Ph√¢n t√≠ch d·ªØ li·ªáu...")
        all_declarations, all_checks, gtgt_summary_df, gtgt_detailed_df, balance_sheet_df, income_statement_df, trial_balance_df, tndn_summary_df, tncn_qtt_summary_df, tncn_details_df, tncn_kk_summary_df = parse_and_analyze(
            files_to_analyze, params["accounting_standard"], output_invoice_data, input_invoice_data, notes_content)
        progress_bar.progress(90)

        st.session_state['analysis_complete'] = True
        st.session_state['all_declarations'] = all_declarations
        st.session_state['all_checks'] = all_checks
        st.session_state['gtgt_summary_df'] = gtgt_summary_df
        st.session_state['balance_sheet_df'] = balance_sheet_df
        st.session_state['income_statement_df'] = income_statement_df
        st.session_state['trial_balance_df'] = trial_balance_df
        st.session_state['tndn_summary_df'] = tndn_summary_df
        st.session_state['tncn_qtt_summary_df'] = tncn_qtt_summary_df
        st.session_state['tncn_details_df'] = tncn_details_df
        st.session_state['tncn_kk_summary_df'] = tncn_kk_summary_df
        st.session_state['gemini_api_key'] = params.get("gemini_api_key")
        st.session_state['output_invoice_data'] = output_invoice_data
        st.session_state['input_invoice_data'] = input_invoice_data
        st.session_state['notes_content'] = notes_content
        st.session_state['invoice_analysis_type_at_run'] = params["output_invoice_type"]

        status_text.text("B∆∞·ªõc 5/5: Hi·ªÉn th·ªã k·∫øt qu·∫£...")
        progress_bar.progress(100)
        status_text.text("Ho√†n th√†nh!")
        time.sleep(1)
        st.rerun()

    if st.session_state.get('analysis_complete', False):
        display_results()


if __name__ == "__main__":
    main()
